<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planet.python.org/</link>
	<language>en</language>
	<description>Planet Python - http://planet.python.org/</description>

<item>
	<title>Mike Driscoll: PyCon 2012 Website Launched</title>
	<guid>http://www.blog.pythonlibrary.org/2011/08/03/pycon-2012-website-launched/</guid>
	<link>http://www.blog.pythonlibrary.org/2011/08/03/pycon-2012-website-launched/</link>
	<description>&lt;p&gt;PyCon 2012&amp;#8242;s &lt;a href=&quot;http://us.pycon.org/2012/&quot; target=&quot;_blank&quot;&gt;website &lt;/a&gt;just went live today. They already have a bunch of sponsors and information about the conference on the website. Of course, they haven&amp;#8217;t done a call for speakers yet, so don&amp;#8217;t expect to find a list of talks or tutorials for several months. However, the website itself looks pretty slick. You can read the full press release on the &lt;a href=&quot;http://pycon.blogspot.com/2011/08/pycon-us-2012-official-launch.html&quot; target=&quot;_blank&quot;&gt;official PyCon blog&lt;/a&gt;. They are really hyping their diversity statement and code of conduct. I think those are pretty self-explanatory, so I&amp;#8217;m not going to discuss them here. You can check them out yourself.&lt;/p&gt;
&lt;p&gt;Now is the time to start thinking about whether or not you&amp;#8217;d like to give a talk or tutorial at PyCon and start putting together your proposal(s). I&amp;#8217;m sure this year will be pretty big, so there will probably be lots of submissions. What that means is that you need to go the extra mile to make yourself stand out from the crowd. Grab your thinking caps and start mulling!&lt;/p&gt;
&lt;p&gt;You might even start talking PyCon up to your boss in hopes of getting them to send you there and sponsor the event. I&amp;#8217;m sure that PyCon can always use another sponsor. &lt;/p&gt;
&lt;p&gt;FYI: I am a PyCon fan, not a marketer. I have enjoyed going there the past few years and always hope that they do well.&lt;/p&gt;</description>
	<pubDate>Wed, 03 Aug 2011 13:29:54 +0000</pubDate>
</item>
<item>
	<title>Python Software Foundation: PyCon DE 2010 Funding</title>
	<guid>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/UN1cF-jqqQk/pycon-de-2010-funding.html</guid>
	<link>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/UN1cF-jqqQk/pycon-de-2010-funding.html</link>
	<description>&lt;div class=&quot;document&quot; id=&quot;pycon-de-2010-funding&quot;&gt;

&lt;!--&lt;!-- tags:  community, conference, germany, pycon --&gt;
&lt;p&gt;The PSF Board of Directors has awarded a $1500 USD grant to sponsor
&lt;a class=&quot;reference external&quot; href=&quot;http://de.pycon.org/2011/home/&quot;&gt;PyCon DE 2011&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;date-and-location&quot;&gt;
&lt;h4&gt;Date and Location&lt;/h4&gt;
&lt;p&gt;PyCon DE 2011 will be held from October 4th to 9th in Leipzig,
Germany. The conference will be held at the &lt;a class=&quot;reference external&quot; href=&quot;http://leipziger-kubus.de/&quot;&gt;Leipziger Kubus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pycon-de&quot;&gt;
&lt;h4&gt;PyCon DE&lt;/h4&gt;
&lt;p&gt;PyCon DE 2011 is the first PyCon in the German-speaking countries.
It consist of one day of 12 high-quality tutorials, three days of more than
60 talks, and two days of sprints. The topics reflect the wide usage of Python,
including web development, science and engineering, testing, Python in
business, databases, financial engineering, code quality and much more.
The organizers are expecting between 250 and 300 attendees from the excited German-speaking
Python community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;more-information&quot;&gt;
&lt;h4&gt;More Information&lt;/h4&gt;
&lt;p&gt;For more details, refer to the &lt;a class=&quot;reference external&quot; href=&quot;http://de.pycon.org/2011/home/&quot;&gt;PyCon DE 2011&lt;/a&gt; website.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/8520-7265666292048559825?l=pyfound.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=UN1cF-jqqQk:R0mNWd8pAWs:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=UN1cF-jqqQk:R0mNWd8pAWs:-BTjWOF_DHI&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=UN1cF-jqqQk:R0mNWd8pAWs:-BTjWOF_DHI&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=UN1cF-jqqQk:R0mNWd8pAWs:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=UN1cF-jqqQk:R0mNWd8pAWs:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=UN1cF-jqqQk:R0mNWd8pAWs:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=UN1cF-jqqQk:R0mNWd8pAWs:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PythonSoftwareFoundationNews/~4/UN1cF-jqqQk&quot; height=&quot;1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Aug 2011 10:00:31 +0000</pubDate>
</item>
<item>
	<title>PyCon: PyCon US 2012 Official Launch!</title>
	<guid>http://pycon.blogspot.com/2011/08/pycon-us-2012-official-launch.html</guid>
	<link>http://pycon.blogspot.com/2011/08/pycon-us-2012-official-launch.html</link>
	<description>&lt;p&gt;Today the PyCon staff and the &lt;a href=&quot;http://www.python.org/psf/&quot;&gt;Python Software Foundation&lt;/a&gt; are happy to officially kick off &lt;a href=&quot;http://us.pycon.org/2012/&quot;&gt;PyCon 2012&lt;/a&gt;, the 10th annual PyCon US conference, happening in Santa Clara, March 7th-15th. We are very proud to launch with a vibrant, &lt;a href=&quot;http://us.pycon.org/2012/&quot;&gt;refreshed site&lt;/a&gt;, updating the overall look and feel and reflecting the energy of the conference and community.&lt;/p&gt;&lt;p&gt;PyCon 2012 is going to pull out all the stops! We want to host the best community conference in the Python community, bar none. Holding the conference in California, so near the biggest technology hub in the United States and with easy access to international travel, means that we expect to break our previous records for attendance.&lt;/p&gt;&lt;p&gt;We’ve completely overhauled all the aspects of the conference web site - including the design, organization, and content. We have added a &lt;a href=&quot;http://us.pycon.org/2012/diversity/&quot;&gt;diversity statement&lt;/a&gt;, which we feel is in keeping with the spirit that PyCon has always held, as well as an official &lt;a href=&quot;http://us.pycon.org/2012/codeofconduct&quot;&gt;code of conduct for participants&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We will send out the call for talks, tutorials, and poster sessions very soon. We are starting the review process much earlier than in years past, and with more documentation to make it easier to prepare a winning proposal. We also have a bigger team handling talk, tutorial, and poster reviews than ever before, to provide you with more feedback and guidance during the review process.&lt;/p&gt;&lt;p&gt;We are extremely proud to be launching with an amazing array of (24!) sponsors as well. &lt;a href=&quot;http://www.google.com/&quot;&gt;Google&lt;/a&gt; and &lt;a href=&quot;http://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt; are our first top Diamond Sponsors, followed by &lt;a href=&quot;http://www.microsoft.com/&quot;&gt;Microsoft&lt;/a&gt;, &lt;a href=&quot;http://www.nasuni.com/&quot;&gt;Nasuni Corporation&lt;/a&gt; and &lt;a href=&quot;https://gondor.io/&quot;&gt;Gondor&lt;/a&gt; (by Eldarion) at the Platinum level. &lt;a href=&quot;http://www.disneyanimation.com/&quot;&gt;Walt Disney Animation Studios&lt;/a&gt;, &lt;a href=&quot;http://bitly.com/&quot;&gt;Bitly&lt;/a&gt;, &lt;a href=&quot;http://www.revsys.com/&quot;&gt;Revsys&lt;/a&gt;, &lt;a href=&quot;http://www.canonical.com/&quot;&gt;Canonical&lt;/a&gt;, &lt;a href=&quot;http://loggly.com/&quot;&gt;Loggly&lt;/a&gt;, &lt;a href=&quot;http://www.ccpgames.com/en/home.aspx&quot;&gt;CCP Games&lt;/a&gt;, &lt;a href=&quot;http://www.linode.com/&quot;&gt;Linode&lt;/a&gt;, &lt;a href=&quot;https://www.dotcloud.com/&quot;&gt;DotCloud&lt;/a&gt;, &lt;a href=&quot;http://www.zeomega.com/&quot;&gt;ZeOmega&lt;/a&gt; and &lt;a href=&quot;https://snoball.com/&quot;&gt;Snoball.com&lt;/a&gt; are all Gold sponsors.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.americangreetings.com/&quot;&gt;American Greetings Interactive&lt;/a&gt;, &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;http://accense.com/&quot;&gt;Accense Technology&lt;/a&gt;, &lt;a href=&quot;http://www.coxmediagroup.com/&quot;&gt;Cox Media Group&lt;/a&gt;, &lt;a href=&quot;http://www.myyearbook.com/&quot;&gt;myYearBook&lt;/a&gt;, &lt;a href=&quot;http://www.wingware.com/&quot;&gt;Wingware&lt;/a&gt;, &lt;a href=&quot;http://www.10gen.com/&quot;&gt;10Gen/MongoDB&lt;/a&gt;, &lt;a href=&quot;http://www.net-ng.com/en&quot;&gt;net-ng&lt;/a&gt; have signed on as Silver level sponsors. We are also pleased to have &lt;a href=&quot;http://theopenbastion.com/&quot;&gt;The Open Bastion&lt;/a&gt; as a Patron sponsor, and &lt;a href=&quot;http://osuosl.org/&quot;&gt;OSU/OSL&lt;/a&gt; as a F/OSS partner.&lt;/p&gt;&lt;p&gt;With these, and the sponsors to come - and the amazing array of talks, tutorials, poster sessions, lightning talks, open spaces and sprints we are going to have, this will surely be a landmark 10th PyCon.&lt;/p&gt;&lt;p&gt;You can read more, and see a list of all of our sponsors at:&lt;a href=&quot;http://us.pycon.org/2012/sponsors&quot;&gt; http://us.pycon.org/2012/sponsors&lt;/a&gt;. If you or your company are interested in being sponsors, please see &lt;a href=&quot;http://us.pycon.org/2012/sponsors/info/&quot;&gt;http://us.pycon.org/2012/sponsors/info/&lt;/a&gt;. We welcome sponsor of any size and in any industry - Python is a wide, diverse, and amazing community.&lt;/p&gt;&lt;p&gt;You can find out more about the location and conference location on the &lt;a href=&quot;http://us.pycon.org/2012/venue/&quot;&gt;excellent venue page&lt;/a&gt;, track our progress on the official &lt;a href=&quot;http://pycon.blogspot.com/&quot;&gt;PyCon blog&lt;/a&gt; and on twitter via the &lt;a href=&quot;https://twitter.com/#!/search/%23pycon&quot;&gt;#pycon&lt;/a&gt; hashtag, and by following the &lt;a href=&quot;https://twitter.com/#!/pycon&quot;&gt;@pycon&lt;/a&gt; user or &lt;a href=&quot;https://twitter.com/#!/jessenoller&quot;&gt;@jessenoller&lt;/a&gt;. You can also see who else is attending on &lt;a href=&quot;http://lanyrd.com/cctyq&quot;&gt;Lanyrd&lt;/a&gt;, and catch us on IRC at irc.freenode.net - #pycon.&lt;/p&gt;&lt;p&gt;If you have any comments, concerns - or want to get involved, please contact me (Jesse Noller, PyCon Chair) at &lt;a href=&quot;mailto:jnoller@python.org&quot;&gt;jnoller@python.org&lt;/a&gt; or the &lt;a href=&quot;mailto:pycon-organizers@python.org&quot;&gt;pycon-organizers@python.org&lt;/a&gt; mailing list.&lt;/p&gt;&lt;p&gt;Thank you.&lt;/p&gt;&lt;p&gt;Jesse Noller, Chair - PyCon 2012&lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/11638628-3647614187727558740?l=pycon.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 03 Aug 2011 09:15:24 +0000</pubDate>
</item>
<item>
	<title>Phillip J. Eby: WSGI, Web Frameworks, and Requests: Explicit or Implicit?</title>
	<guid>http://feedproxy.google.com/~r/pje-on-programming/~3/SfhO-at8RDY/wsgi-web-frameworks-and-requests.html</guid>
	<link>http://feedproxy.google.com/~r/pje-on-programming/~3/SfhO-at8RDY/wsgi-web-frameworks-and-requests.html</link>
	<description>&lt;p&gt;In Python web programming and frameworks, there is a constant juggling act that takes place between &quot;explicit&quot; and &quot;implicit&quot;.&amp;nbsp;&amp;nbsp;Too explicit, and the code may get too verbose or unwieldy.&amp;nbsp; Too implicit, and the code may lose clarity or maintainability.&lt;/p&gt;
&lt;p&gt;And nowhere can this tension be more clearly seen, than in the area of &quot;request&quot; objects.&amp;nbsp; After all, nearly every web programming framework has some notion of a &quot;request&quot; at its core: usually some sort of object with an API.&lt;/p&gt;
&lt;p&gt;Now, as you may recall from my &lt;a href=&quot;http://dirtsimple.org/2011/08/is-wsgi-lite-library-or-protocol-and.html&quot;&gt;previous article&lt;/a&gt;, the Web-SIG originally set out in 2003 to standardize a &lt;strong&gt;universal&lt;/strong&gt; &quot;request&quot; API for Python, but I diverted this effort towards a different sort of request API -- the WSGI &quot;environ&quot; object.&lt;/p&gt;
&lt;p&gt;Where web framework request APIs usually emphasize methods and properties, the WSGI &quot;environ&quot; object is just a big bag of data.&amp;nbsp; It doesn't &lt;em&gt;have&lt;/em&gt; any operations or properties.&lt;/p&gt;
&lt;p&gt;But the upside to this downside, is that the enviornment is &lt;em&gt;extensible&lt;/em&gt;, in a way that a request object is not.&amp;nbsp; You can add whatever you want to it, and you can call functions on it to do things that a request object would do with methods.&amp;nbsp; (Yay, freedom!)&lt;/p&gt;
&lt;p&gt;But the &lt;em&gt;new&lt;/em&gt; downside to that upside, is that if you want to use library functions on the environ instead of framework &quot;request&quot; object methods, you now have to pass the environ back into the library functions!&amp;nbsp; (Boo, hiss.)&lt;/p&gt;&lt;h4&gt;Binding To The Environment&lt;/h4&gt;
&lt;p&gt;So, WSGI-era web libraries (like WebOb and Werkzeug) tend to define their next-generation &quot;request&quot; objects as wrappers bound to the environ.&amp;nbsp; As Ian Bicking put it:&lt;/p&gt;
&lt;blockquote dir=&quot;ltr&quot;&gt;
&lt;p&gt;&quot;Everything WebOb does is basically functions on the environ&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, this isn't the &lt;em&gt;only&lt;/em&gt; strategy for managing request information.&amp;nbsp; Some web app frameworks dodge the argument-passing issue by using thread locals, or worse yet, global variables.&amp;nbsp; But they're &lt;em&gt;still&lt;/em&gt; trying to solve the same problem: connecting actions that a web application needs to perform, with some notion of the &quot;current request&quot;.&lt;/p&gt;
&lt;p&gt;And in both cases, a key driver for the API design is brevity and ease-of-use (implicit) vs. clarity and consistency (explicit).&lt;/p&gt;
&lt;p&gt;On the explicit side, It's annoying to be constantly saying &quot;foo = bar(environ, etc)&quot;, if only because it somehow looks less Pythonic than &quot;foo = request.bar(etc)&quot;.&lt;/p&gt;
&lt;p&gt;So in effect, what we want in our frameworks is a way to (implicitly)&amp;nbsp;&lt;em&gt;bind&lt;/em&gt; operations to the &quot;request&quot;, so that it isn't necessary to explicitly spell out the connection in every line of code.&amp;nbsp; (Even if we're still &lt;em&gt;explicitly&lt;/em&gt; referencing the request object.)&lt;/p&gt;
&lt;p&gt;In fact, we don't even want to have to include boilerplate like 'request = Request(environ)' at the top of our apps' code, and so we'd much rather have this binding take place &lt;strong&gt;outside&lt;/strong&gt; our code entirely.&lt;/p&gt;
&lt;p&gt;Now, &lt;em&gt;this&lt;/em&gt; is where things get really interesting!&amp;nbsp; In order to get rid of this boilerplate, web libraries and frameworks will usually do one of two things.&amp;nbsp; Either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They provide a decorator to change the calling signature while keeping external WSGI compliance (like WebOb), or
&lt;/li&gt;
&lt;li&gt;They ditch WSGI entirely and use a different calling signature
&amp;nbsp;(like Django)
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And in either case, we're now more or less back where we started, pre-WSGI, as you are now writing code with a calling signature that's implicitly coupled to a specific library or framework.&lt;/p&gt;
&lt;p&gt;Sure, you get certain benefits in exchange for making this commitment, and you're less tightly coupled to libraries using option 1.&amp;nbsp; But it's still a pretty exclusive commitment.&amp;nbsp; If you want to use code from more than one library, you're going to have to write the boilerplate for each of them, except for whichever one you choose to be your &quot;primary&quot; - the main one that calls you and/or decorates your code.&lt;/p&gt;&lt;h4&gt;The Original Goal Of WSGI&lt;/h4&gt;
&lt;p&gt;Now, the original idea for WSGI (well, &lt;em&gt;my&lt;/em&gt; original idea, anyway) was that by letting &quot;request&quot; objects wrap the environ, and using &quot;functions on the environ&quot;, we could get &lt;em&gt;out&lt;/em&gt; of this situation.&amp;nbsp; As I wrote in the original &lt;a href=&quot;http://www.python.org/dev/peps/pep-0333/#rationale-and-goals&quot;&gt;PEP 333 rationale section&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote dir=&quot;ltr&quot;&gt;
&lt;p&gt;&quot;If middleware can be both simple and robust, and WSGI is widely available in servers and frameworks, it allows for the possibility of an entirely new kind of Python web application framework: one consisting of loosely-coupled WSGI middleware components.&lt;/p&gt;
&lt;p&gt;&quot;Indeed, existing framework authors may even choose to refactor their frameworks' existing services to be provided in this way, becoming more like libraries used with WSGI, and less like monolithic frameworks. This would then allow application developers to choose &quot;best-of-breed&quot; components for specific functionality, rather than having to commit to all the pros and cons of a single framework.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But what I didn't understand then, was just how &lt;em&gt;annoying&lt;/em&gt; it is to have to explicitly pass the environ into every library function you wanted to use!&lt;/p&gt;
&lt;p&gt;(Actually, it's not just that it's annoying from a number-of-keystrokes point of view, it's also more foreign to a Python programmer's sensibilities.&amp;nbsp; We don't usually mind &lt;em&gt;receiving&lt;/em&gt; an explicit &quot;self&quot;, but for some reason, we seem to hate &lt;strong&gt;sending&lt;/strong&gt; one!)&lt;/p&gt;
&lt;p&gt;And that (in a somewhat roundabout way) is how I ended up adding the experimental &quot;binding&quot; protocol to &lt;a href=&quot;http://dirtsimple.org/2011/08/is-wsgi-lite-library-or-protocol-and.html&quot;&gt;WSGI Lite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, what the binding protocol provides, is a way to &lt;em&gt;generically&lt;/em&gt; bind things to the environ dictionary, and pass them into your application's calling signature, while retaining WSGI compliance for any code that calls your function.&lt;/p&gt;
&lt;p&gt;In other words, the binding protocol is a way to make it so that you can use as many libraries, functions, or objects for your request as you want, without needing to pass an 'environ' parameter to them over and over.&lt;/p&gt;
&lt;p&gt;Now, in the simplest case, you can just use the binding protocol as a generic way to obtain any given library's request objects.&amp;nbsp; You can say, &quot;my 'request' parameter maps to a WebOb request&quot;, for example.&lt;/p&gt;
&lt;p&gt;But the really &lt;em&gt;interesting&lt;/em&gt; cases come about, when you stop thinking in terms of &quot;request&quot; objects, and start thinking about what your application reallly &lt;em&gt;does&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;The Meaning of &quot;Lite&quot;&lt;/h4&gt;
&lt;p&gt;For example, why not bind a session object to your function's 'session' argument?&amp;nbsp; Or maybe what you &lt;em&gt;really&lt;/em&gt; want is to just receive an authenticated user object in your 'user' parameter, and a cart object in your 'cart' parameter, instead of first getting a session, just so you can&amp;nbsp;&lt;em&gt;get&lt;/em&gt; to the user and cart.&lt;/p&gt;
&lt;p&gt;In other words, what if you made your &lt;strong&gt;application goals&lt;/strong&gt; more explicit?&lt;/p&gt;
&lt;p&gt;Now currently, getting access to such application-specific objects requires either painfully-verbose boilerplate off of a raw WSGI environment, or an increasingly tight coupling to an increasingly monolithic framework that does more of the work for you.&lt;/p&gt;
&lt;p&gt;But, with the Lite binding protocol, you can now represent &lt;em&gt;anything&lt;/em&gt; that's tied to &quot;the current request&quot;, just by creating a callable object that takes an environment parameter.&lt;/p&gt;
&lt;p&gt;Which means you don't really need &quot;request&quot; objects any more in your main code, because you can simply arrange to be &lt;em&gt;called with whatever objects you need&lt;/em&gt;, to do the thing you're actually &lt;strong&gt;doing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And so your application code stops being about manipulating &quot;web stuff&quot;, to focus more on whatever it is that your app actually &lt;em&gt;does&lt;/em&gt;...&amp;nbsp; while still being just a WSGI app from the point of view of its caller.&lt;/p&gt;
&lt;p&gt;(This by the way, is part of why I dubbed the concept &quot;WSGI Lite&quot;, despite the fact that it adds new protocols to WSGI: it effectively lets you take most of the &quot;WSGI&quot; out of &quot;WSGI applications&quot;.)
&lt;/p&gt;
&lt;h4&gt;The Great &quot;Apps vs. Controllers&quot; Debate&lt;/h4&gt;
&lt;p&gt;Now, if you look at how &lt;em&gt;non-&lt;/em&gt;WSGI-centric, &quot;full-stack&quot; frameworks (like Django, TurboGears, etc.) operate, they often have things they call &quot;controllers&quot;: functions with more specialized signatures for doing this kind of &quot;more app, less web&quot; kind of stuff.&amp;nbsp; However, these frameworks tend to end up being very un-WSGI internally, because plain WSGI doesn't handle this sort of thing very well.&lt;/p&gt;
&lt;p&gt;However, with the WSGI Lite binding protocol, you can write controllers with whatever signature you like, while remaining &quot;WSGI all the way down&quot;.&amp;nbsp; Anything you want as an argument, you can just create a binding rule for, which can be as simple as a string (to pull out an environ key) a short function that computes a value, or a tiny classmethod that returns an object wrapping the environ.&lt;/p&gt;
&lt;p&gt;And, if it's a callable (like a function or a method), it &lt;em&gt;too&lt;/em&gt; can use the binding protocol, and ask for its arguments to be calculated from the request.&lt;/p&gt;
&lt;p&gt;And that means that you can take, say, a generic binding rule that fetches a parsed form, and use it to write an application-specific binding rule that looks up something in a database.&lt;/p&gt;
&lt;p&gt;At which point, you can now write a controller that uses that binding rule to get something it needs as an argument.&lt;/p&gt;
&lt;h4&gt;Where All This Is Going&lt;/h4&gt;
&lt;p&gt;Now, if you look at where all this is going, you'll see that you're going to end up with a very small application body: just the code that actually &lt;em&gt;does&lt;/em&gt; things with the information that came in, and decides what to send back out.&lt;/p&gt;
&lt;p&gt;Something, in fact, that looks very much like a &quot;controller&quot; would in a non-WSGI, full-stack web framework...&amp;nbsp; yet isn't locked in to one particular full stack framework.&lt;/p&gt;
&lt;p&gt;Now, I don't know how clear any of the above was without code examples.&amp;nbsp; (Probably not very.)&amp;nbsp; But the endgame that I'm trying to describe, is a future in which both &quot;full stack&quot; and &quot;WSGI-centric&quot; frameworks use a &lt;em&gt;common protocol&lt;/em&gt; to provide their features to applications.&lt;/p&gt;
&lt;p&gt;And, more importantly, a future where &lt;strong&gt;full-stack features do not require &lt;em&gt;learning&lt;/em&gt;&amp;nbsp;a full stack framework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And where &lt;strong&gt;every application is its own framework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In effect, the binding protocol is a tool that allows every app to define its own embedded DSL: the set of high-level data objects and operations that it needs in order to do whatever it does.&lt;/p&gt;
&lt;p&gt;And these high-level, application-specific objects and operations are composed of lower-level, domain-generic objects and operations (such as form parsers and validators, URL parameter extractors, session and cookie managers, etc.), obtained from libraries or frameworks.&lt;/p&gt;
&lt;p&gt;And all of these objects are passed around via the environment and binding rules, while retaining WSGI Lite calling signatures...&amp;nbsp; making the entire thing &quot;WSGI all the way down&quot;.&lt;/p&gt;
&lt;p&gt;And yet, the &lt;em&gt;code&lt;/em&gt; contained in those applications would not look like &quot;WSGI&quot; as we know it today.&amp;nbsp; For example:&lt;/p&gt;
&lt;pre&gt;
@lite(
    user = myapp.authorized_user,
    output = myapp.format_chooser,
)
def todo_list(environ, user, output):
    return output(user.todo_items())
&lt;/pre&gt;
&lt;p&gt;Or, perhaps the Python 3 version would look like this:&lt;/p&gt;
&lt;pre&gt;
@lite
def todo_list(
        environ,
        user:   myapp.authorized_user,
        output: myapp.format_chooser
    ):
    return output(user.todo_items())
&lt;/pre&gt;&lt;p&gt;Neither of these looks anything like &quot;WSGI&quot; code as we know it today - it's more like a full-stack framework's code.  But, where the bindings in a full-stack framework are &lt;em&gt;implicit&lt;/em&gt; (like automatically formatting the output with a template or turning it into JSON), all of the bindings here are &lt;strong&gt;explicit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;   And not only is explicit better than implicit, but...&lt;/p&gt;
&lt;h4&gt;Readability Counts!&lt;/h4&gt;
&lt;p&gt;You can see right away, for example, that this app is using some sort of chooser to render the output in some request-determined format, and you can track down the relevant code, without having to first learn all of the implicit knowledge of a particular framework's construction.&lt;/p&gt;
&lt;p&gt;And, the &lt;em&gt;point&lt;/em&gt; of this app function is immediately obvious - it displays a user's todo list.  (Something that would otherwise be hidden under a pile of web I/O code, if this were written to plain WSGI or with a WSGI-centric library or framework.)&lt;/p&gt;
&lt;p&gt;And what this means is, if this approach becomes a focal point for Python web development, then being a Python web programmer would not be a matter of being a &quot;Django developer&quot; or &quot;TurboGears developer&quot; or &quot;Pyramid Developer&quot; or any &lt;em&gt;other&lt;/em&gt; sort of developer...&lt;/p&gt;
&lt;p&gt;Other than a &lt;em&gt;Python&lt;/em&gt; developer.&lt;/p&gt;
&lt;p&gt;Because any Python developer could pick this up, without having to have all the implicit, framework-specific knowledge already in their head.&lt;/p&gt;
&lt;p&gt;And hopefully, this will help get us to a situation  where, instead of people saying, &quot;you should use Python for your web app because framework X is great&quot;...&lt;/p&gt;
&lt;p&gt;People will say, &quot;you should use Python for your web app because it lets you focus on what your application is really doing, and no matter what libraries you use, your code will be readable and maintainable, even by people who haven't used those libraries.&quot;&lt;/p&gt;
&lt;p&gt;Or maybe just, &quot;you should use Python for your web app because &lt;em&gt;it's a great language for web development&lt;/em&gt;!&quot;&lt;/p&gt;&lt;h4&gt;Plumbing The Pipe Dream&lt;/h4&gt;
&lt;p&gt;Now, is all that just a pipe dream?&lt;/p&gt;
&lt;p&gt;  Maybe so.  After all, there are still a &lt;strong&gt;lot&lt;/strong&gt; of hurdles between here and there!&lt;/p&gt;
&lt;p&gt;(For starters, I think that the actual binding protocol probably still needs some work!)&lt;/p&gt;
&lt;p&gt;But if you want to make a &quot;pipe&quot; dream real, you've got to start with the requirements for the &lt;strong&gt;plumbing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So right now, I'm collecting use cases from frameworks as I encounter them, to see what services the popular frameworks provide, and how they could be expressed as bindings.&lt;/p&gt;
&lt;p&gt;But I'm &lt;em&gt;also&lt;/em&gt; really interested in the problems that such frameworks have, in terms of how they currently communicate state, configuration, and other information to user code.  Are there any open issues the binding protocol could solve now, or could solve with some additions?&lt;/p&gt;
&lt;p&gt;Because that's what's really going to make the difference to adoption here. The authors of established libraries and frameworks aren't going to change things just beacuse I said this is a neat idea!&lt;/p&gt;
&lt;p&gt;But if we can make the protocol &lt;em&gt;solve&lt;/em&gt; some existing problems -- like helping to get rid of thread-local objects, for example -- then folks have another reason to get on board with a common protocol, besides it &lt;em&gt;being&lt;/em&gt; a common protocol.&lt;/p&gt;
&lt;p&gt;So, that's the interesting question that lies ahead:&lt;/p&gt;
&lt;p&gt;Do you have any warts in your current app, library, or framework that this might help you solve?  Or a feature you think it could help you add?&lt;/p&gt;
&lt;p&gt;Leave me a comment here, or drop me an email via the Web-SIG!&lt;/p&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=SfhO-at8RDY:4x3w3-fOwC8:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=SfhO-at8RDY:4x3w3-fOwC8:UT3xtbGYFzA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?d=UT3xtbGYFzA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=SfhO-at8RDY:4x3w3-fOwC8:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?i=SfhO-at8RDY:4x3w3-fOwC8:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</description>
	<pubDate>Tue, 02 Aug 2011 21:46:52 +0000</pubDate>
</item>
<item>
	<title>PyPy Development: PyPy is faster than C, again: string formatting</title>
	<guid>http://feedproxy.google.com/~r/PyPyStatusBlog/~3/rkdXKSuYy8Y/pypy-is-faster-than-c-again-string.html</guid>
	<link>http://feedproxy.google.com/~r/PyPyStatusBlog/~3/rkdXKSuYy8Y/pypy-is-faster-than-c-again-string.html</link>
	<description>&lt;p&gt;String formatting is probably something you do just about every day in Python,
and never think about.  It's so easy, just &lt;tt class=&quot;docutils literal&quot;&gt;&amp;quot;%d %d&amp;quot; % (i, i)&lt;/tt&gt; and you're
done.  No thinking about how to size your result buffer, whether your output
has an appropriate NULL byte at the end, or any other details.  A C
equivalent might be:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
char x[44];
sprintf(x, &amp;quot;%d %d&amp;quot;, i, i);
&lt;/pre&gt;
&lt;p&gt;Note that we had to stop for a second and consider how big numbers might get
and overestimate the size (44 = length of the biggest number on 64bit (20) +
1 for the sign * 2 + 1 (for the space) + 1 (NUL byte)), it took the authors of
this post, fijal and alex, 3 tries to get the math right on this :-)&lt;/p&gt;
&lt;p&gt;This is fine, except you can't even return &lt;tt class=&quot;docutils literal&quot;&gt;x&lt;/tt&gt; from this function, a more
fair comparison might be:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
char *x = malloc(44 * sizeof(char));
sprintf(x, &amp;quot;%d %d&amp;quot;, i, i);
&lt;/pre&gt;
&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;x&lt;/tt&gt; is slightly overallocated in some situations, but that's fine.&lt;/p&gt;
&lt;p&gt;But we're not here to just discuss the implementation of string
formatting, we're here to discuss how blazing fast PyPy is at it, with
the new &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;unroll-if-alt&lt;/span&gt;&lt;/tt&gt; branch.  Given the Python code:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
def main():
    for i in xrange(10000000):
        &amp;quot;%d %d&amp;quot; % (i, i)

main()
&lt;/pre&gt;
&lt;p&gt;and the C code:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;


int main() {
    int i = 0;
    char x[44];
    for (i = 0; i &amp;lt; 10000000; i++) {
        sprintf(x, &amp;quot;%d %d&amp;quot;, i, i);
    }
}
&lt;/pre&gt;
&lt;p&gt;Run under PyPy, at the head of the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;unroll-if-alt&lt;/span&gt;&lt;/tt&gt; branch, and
compiled with GCC 4.5.2 at -O4 (other optimization levels were tested,
this produced the best performance). It took &lt;strong&gt;0.85&lt;/strong&gt; seconds to
execute under PyPy, and &lt;strong&gt;1.63&lt;/strong&gt; seconds with the compiled binary. We
think this demonstrates the incredible potential of dynamic
compilation, GCC is unable to inline or unroll the &lt;tt class=&quot;docutils literal&quot;&gt;sprintf&lt;/tt&gt; call,
because it sits inside of libc.&lt;/p&gt;
&lt;p&gt;Benchmarking the C code:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;


int main() {
    int i = 0;
    for (i = 0; i &amp;lt; 10000000; i++) {
        char *x = malloc(44 * sizeof(char));
        sprintf(x, &amp;quot;%d %d&amp;quot;, i, i);
        free(x);
    }
}
&lt;/pre&gt;
&lt;p&gt;Which as discussed above, is more comperable to the Python, gives a
result of &lt;strong&gt;1.96&lt;/strong&gt; seconds.&lt;/p&gt;
&lt;p&gt;Summary of performance:&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;20%&quot; /&gt;
&lt;col width=&quot;19%&quot; /&gt;
&lt;col width=&quot;19%&quot; /&gt;
&lt;col width=&quot;12%&quot; /&gt;
&lt;col width=&quot;30%&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;Platform&lt;/td&gt;
&lt;td&gt;GCC (stack)&lt;/td&gt;
&lt;td&gt;GCC (malloc)&lt;/td&gt;
&lt;td&gt;CPython&lt;/td&gt;
&lt;td&gt;PyPy (unroll-if-alt)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;1.63s&lt;/td&gt;
&lt;td&gt;1.96s&lt;/td&gt;
&lt;td&gt;10.2s&lt;/td&gt;
&lt;td&gt;0.85s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;relative to C&lt;/td&gt;
&lt;td&gt;1x&lt;/td&gt;
&lt;td&gt;0.83x&lt;/td&gt;
&lt;td&gt;0.16x&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1.9x&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Overall PyPy is almost &lt;strong&gt;2x&lt;/strong&gt; faster. This is clearly win for dynamic
compilation over static - the &lt;cite&gt;sprintf&lt;/cite&gt; function lives in libc and so
cannot be specializing over the constant string, which has to be parsed
every time it's executed. In the case of PyPy, we specialize
the assembler if we detect the left hand string of the modulo operator
to be constant.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br /&gt;
alex &amp;amp; fijal&lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/3971202189709462152-6756589731691762127?l=morepypy.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/rkdXKSuYy8Y&quot; height=&quot;1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 02 Aug 2011 20:52:17 +0000</pubDate>
</item>
<item>
	<title>V.S. Babu: Quick Start: Git for personal use</title>
	<guid>http://vsbabu.org/mt/archives/2011/08/02/quick_start_git_for_personal_use.html</guid>
	<link>http://vsbabu.org/mt/archives/2011/08/02/quick_start_git_for_personal_use.html</link>
	<description>&lt;p&gt;
Problem: Needed to find a way to keep my config and research files under version control which I can get to
various machines I work with and update from anywhere.
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have an OpenBSD server account (no root though)&lt;/li&gt;
&lt;li&gt;I don't want to run any additional daemon process or expose it via http&lt;/li&gt;
&lt;li&gt;I can download and compile source if it can be installed as a non root account&lt;/li&gt;
&lt;li&gt;Transport must be via SSH&lt;/li&gt;
&lt;li&gt;I don't need GUI tools, speed should be reasonable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Tried &lt;a href=&quot;http://mercurial.selenic.com/&quot;&gt;Mercurial&lt;/a&gt;, &lt;a href=&quot;http://darcs.net/&quot;&gt;Darcs&lt;/a&gt;, &lt;a href=&quot;http://bazaar.canonical.com/&quot;&gt;Bazaar&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;. &lt;a href=&quot;http://fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; is also a great tool that provides wiki, version control and ticket management. Darcs is the easiest, but for some reason, extremely slow. Finally chose Git.  
Download and compile was easy. Read top 3 lines in the &lt;tt&gt;INSTALL&lt;/tt&gt; file in source distribution for steps.
Rest of the steps explain how I set it up. Note that this may not be the best possible Git workflow. Merely that it works for me. Note that I've installed git in &lt;tt&gt;~/software/git&lt;/tt&gt;.
&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 17:37:10 +0000</pubDate>
</item>
<item>
	<title>PyCon: PyCon DE 2011 - Registration is Open</title>
	<guid>http://pycon.blogspot.com/2011/08/pycon-de-2011-registration-is-open.html</guid>
	<link>http://pycon.blogspot.com/2011/08/pycon-de-2011-registration-is-open.html</link>
	<description>Registration is now open. You can &lt;a href=&quot;http://de.pycon.org/2011/tickets/&quot;&gt;register&lt;/a&gt; for the conference and for tutorials.&lt;br /&gt;&lt;br /&gt;The first  &lt;a href=&quot;http://de.pycon.org/&quot;&gt;PyCon DE&lt;/a&gt; will be held October 4-9, 2011 in Leipzig, Germany.&lt;br /&gt;&lt;br /&gt;A tutorial day is followed by three days with talks in three parallel tracks and&lt;br /&gt;two days of sprints. The program will be announced in a few days.&lt;br /&gt;More details can be found on the PyCon DE &lt;a href=&quot;http://de.pycon.org/2011/Call_for_Papers/&quot;&gt;website&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Please pass this post on to those you feel may be interested.&lt;/span&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/11638628-7325228710306177581?l=pycon.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 02 Aug 2011 18:30:03 +0000</pubDate>
</item>
<item>
	<title>Martijn Faassen: WSGI: Bringing web frameworks closer together</title>
	<guid>http://faassen.n--tree.net/blog/view/weblog/2011/08/02/0</guid>
	<link>http://faassen.n--tree.net/blog/view/weblog/2011/08/02/0</link>
	<description>&lt;p&gt;Recently I have seen a sentiment espoused by some people in the Python web community that WSGI has failed to live up to one of this promises: bringing Python web frameworks closer together.&lt;/p&gt;
&lt;p&gt;Let's look at history and see whether this is true.&lt;/p&gt;
&lt;p&gt;Here's a snapshot of the Python web framework landscape in 2005:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Zope had its own way of hooking up to web servers. Several
ways. FastCGI, SCGI, Apache Rewrite rules, ProxyPass.&lt;/li&gt;
&lt;li&gt;Django had just emerged, with its own way of hooking up to web
servers. Several ways too; I can find references to using
mod_python, FastCGI, SCGI and AJP.&lt;/li&gt;
&lt;li&gt;TurboGears had also just emerged. TurboGears 1.x used CherryPy as
its web server. A quick search turns up references to hooking it up
to Apache using mod_python, and using mod_rewrite.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look at the web framework landscape in 2011:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Zope (in all its incarnations) can be hooked up to web servers to
WSGI, and this is generally the preferred method.&lt;ul&gt;
&lt;li&gt;Zope 2 comes with native WSGI support.&lt;/li&gt;
&lt;li&gt;Grok has native WSGI support and uses paster as its development
server.&lt;/li&gt;
&lt;li&gt;BlueBream has native WSGI support and uses paster as its
development server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django has WSGI as the preferred method to hook up to web servers.&lt;/li&gt;
&lt;li&gt;TurboGears is now built around WSGI and uses paster as its
development server.&lt;/li&gt;
&lt;li&gt;Both Pylons the web framework as well as Pyramid are built around
WSGI, and both use paster as its development server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[no claim is made that this represents all Python web frameworks out there]&lt;/p&gt;
&lt;p&gt;Has this brought web frameworks closer together? The answer is clearly a resounding YES: if you know how to hook up a WSGI application to your web server of choice, you have basic knowledge to deal with all of these web frameworks. You can use Apache mod_wsgi with all of them, for instance.&lt;/p&gt;
&lt;p&gt;In addition, only Zope 2 and Django do not use paster as their default
development web server. We see a major component being shared between
Grok, BlueBream, TurboGears, Pylons and Pyramid. This knowledge
transfers between web frameworks.&lt;/p&gt;
&lt;p&gt;So this sentiment is clearly wrong. Thank you to everybody who has helped create and push WSGI!&lt;/p&gt;
&lt;p&gt;Other arguments have been made, for instance that WSGI &lt;em&gt;middleware&lt;/em&gt; in particular isn't bringing Python web frameworks closer together. I believe that's wrong too, but I will leave defending that point to someone more familiar with that topic.&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 13:59:11 +0000</pubDate>
</item>
<item>
	<title>eGenix.com: eGenix mx Base Distribution 3.2.1 GA</title>
	<guid>http://www.egenix.com/company/news/eGenix-mx-Base-Distribution-3.2.1-GA.html</guid>
	<link>http://www.egenix.com/company/news/eGenix-mx-Base-Distribution-3.2.1-GA.html</link>
	<description>eGenix is pleased to announce the immediate availability of the &lt;a href=&quot;http://www.egenix.com/products/python/mxBase/&quot;&gt;eGenix mx Base Distribution 3.2.1&lt;/a&gt; for &lt;a href=&quot;http://www.python.org/&quot;&gt;Python&lt;/a&gt; 2.4 - 2.7.</description>
	<pubDate>Tue, 02 Aug 2011 12:00:00 +0000</pubDate>
</item>
<item>
	<title>Mikko Ohtamaa: AJAX proxy view with Python, urllib and Plone</title>
	<guid>http://blog.mfabrik.com/2011/08/02/ajax-proxy-view-with-python-urllib-and-plone/</guid>
	<link>http://blog.mfabrik.com/2011/08/02/ajax-proxy-view-with-python-urllib-and-plone/</link>
	<description>&lt;div class=&quot;body&quot;&gt;
&lt;p&gt;Old web browsers do not support &lt;a class=&quot;reference external&quot; href=&quot;https://developer.mozilla.org/en/HTTP_access_control&quot;&gt;Allow-acces-origin HTTP header&lt;/a&gt; needed to do cross-domain AJAX requests (IE6, IE7).&lt;/p&gt;
&lt;p&gt;Below is an example how to work around this for jQuery getJSON() calls by&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Detecting browsers which do not support this using jQuery.support API&lt;/li&gt;
&lt;li&gt;Doing an alternative code path through a local website proxy view which uses Python &lt;tt class=&quot;docutils literal&quot;&gt;urllib&lt;/tt&gt; to make server-to-server call and return it as it would be a local call, thus working around cross-domain restriction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This example is for Plone/Grok, but the code is easily port to other Python web frameworks.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p class=&quot;last&quot;&gt;&lt;em&gt;Note: This is not a full example code. Basic Python and Javascript skills are needed to interpret and adapt the code for your use case.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Javascript example&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;/**
 * Call a RESTful service vie AJAX
 *
 * The final URL is constructed by REST function name, based
 * on a base URL from the global settings.
 *
 * If the browser does not support cross domain AJAX calls
 * we'll use a proxy function on the local server. For
 * performance reasons we do this only when absolutely needed.
 *
 * @param {String} functionName REST function name to a call
 *
 * @param {Object} Arguments as a dictionary like object, passed to remote call
 */
function callRESTful(functionName, args, callback) {

    var src = myoptions.restService + &quot;/&quot; +functionName;

    // set to true to do proxied request on every browser
    // useful if you want to use Firebug to debug your server-side proxy view
    var debug = false;

        console.log(&quot;Doing remote call to:&quot; + src)

        // We use jQuery API to detect whether a browser supports cross domain AJAX calls
        // http://api.jquery.com/jQuery.support/
        if(!jQuery.support.cors || debug) {
                // http://alexn.org/blog/2011/03/24/cross-domain-requests.html
                // Opera 10 doesn't have this feature, neither do IExplorer &amp;lt; 8, Firefox &amp;lt; 3.5

                console.log(&quot;Mangling getJSON to go through a local proxy&quot;)

                // Change getJSON to go to our proxy view on a local server
                // and pass the orignal URL as a parameter
                // The proxy view location is given as a global JS variable
                args.url = src;
                src = myoptions.portalUrl + &quot;/@@proxy&quot;;
        }

        // Load data from the server
        $.getJSON(src, args, function(data) {
                // Parse incoming data and construct Table rows according to it
                console.log(&quot;Data succesfully loaded&quot;);
                callback(data, args);

     });

}&lt;/pre&gt;
&lt;p&gt;The server-side view:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;import socket
import urllib
import urllib2
from urllib2 import HTTPError

from five import grok
from Products.CMFCore.interfaces import ISiteRoot
from mysite.app import options

class Proxy(grok.CodeView):
    &quot;&quot;&quot;
    Pass a AJAX call to a remote server. This view is mainly indended to be used
    with jQuery.getJSON() requests.

    This will work around problems when a browser does not support Allow-Access-Origin HTTP header (IE).

    Asssuming only HTTP GET requests are made.s
    &quot;&quot;&quot;

    # This view is available only at the root of Plone site
    grok.context(ISiteRoot)

    def isAllowed(self, url):
        &quot;&quot;&quot;
        Check whether we are allowed to call the target URL.

        This prevents using your service as an malicious proxy
        (to call any internet service).
        &quot;&quot;&quot;

        allowed_prefix = options.REST_SERVICE_URL

        if url.startswith(allowed_prefix):
            return True

        return False

    def render(self):
        &quot;&quot;&quot;
        Use HTTP GET ``url`` query parameter for the target of the real request.
        &quot;&quot;&quot;

        # Make sure any theming layer won't think this is HTML
        # http://stackoverflow.com/questions/477816/the-right-json-content-type
        self.request.response.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)

        url = self.request.get(&quot;url&quot;, None)
        if not url:
            self.request.response.setStatus(500, &quot;url parameter missing&quot;)

        if not self.isAllowed(url):
            # The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeate
            self.request.response.setStatus(403, &quot;proxying to the target URL not allowed&quot;)
            return

        # Pass other HTTP GET query parameters direclty to the target server
        params = {}
        for key, value in self.request.form.items():
            if key != &quot;url&quot;:
                params[key] = value

        # http://www.voidspace.org.uk/python/articles/urllib2.shtml
        data = urllib.urlencode(params)

        full_url = url + &quot;?&quot; + data
        req = urllib2.Request(full_url)

        try:

            # Important or if the remote server is slow
            # all our web server threads get stuck here
            # But this is UGLY as Python does not provide per-thread
            # or per-socket timeouts thru urllib
            orignal_timeout = socket.getdefaulttimeout()
            try:
                socket.setdefaulttimeout(10)

                response = urllib2.urlopen(req)
            finally:
                # restore orignal timeoout
                socket.setdefaulttimeout(orignal_timeout)

            # XXX: How to stream respone through Zope
            # AFAIK - we cannot do it currently

            return response.read()

        except HTTPError, e:
            # Have something more useful to log output as plain urllib exception
            # using Python logging interface
            # http://docs.python.org/library/logging.html
            logger.error(&quot;Server did not return HTTP 200 when calling remote proxy URL:&quot; + url)
            for key, value in params.items():
                logger.error(key + &quot;: &quot;  + value)

            # Print the server-side stack trace / error page
            logger.error(e.read())

            raise e&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&quot;signature&quot;&gt;
&lt;a href=&quot;http://mfabrik.com/@@zoho-contact-form&quot;&gt;&lt;img valign=&quot;middle&quot; src=&quot;http://blog.mfabrik.com/wp-content/uploads/mfabrik-24.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://mfabrik.com/@@zoho-contact-form&quot;&gt;Get developers&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/mFabrikWebAndMobileDevelopment&quot; rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot;&gt;&lt;img valign=&quot;middle&quot; src=&quot;http://www.feedburner.com/fb/images/pub/feed-icon16x16.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/mFabrikWebAndMobileDevelopment&quot; rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot;&gt;Subscribe mFabrik blog in a reader&lt;/a&gt; &lt;a href=&quot;http://twitter.com/mfabrik&quot;&gt; &lt;img valign=&quot;middle&quot; src=&quot;http://blog.mfabrik.com/wp-content/uploads/twitter-24.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://twitter.com/moo9000&quot;&gt;Follow me on Twitter&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 08:26:42 +0000</pubDate>
</item>
<item>
	<title>Python Testing Cookbook: An upbeat review of Python Testing Cookbook</title>
	<guid>http://pythontestingcookbook.posterous.com/an-upbeat-review-of-python-testing-cookbook</guid>
	<link>http://pythontestingcookbook.posterous.com/an-upbeat-review-of-python-testing-cookbook</link>
	<description>&lt;p&gt;
	&lt;p&gt;Read this latest upbeat&amp;nbsp;&lt;a href=&quot;http://jaganadhg.freeflux.net/blog/archive/2011/07/27/python-testing-cookbook-by-greg-l-turnquist-review.html&quot;&gt;book review&lt;/a&gt; of Python Testing Cookbook.&lt;/p&gt;
	
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pythontestingcookbook.posterous.com/an-upbeat-review-of-python-testing-cookbook&quot;&gt;Permalink&lt;/a&gt; 

	| &lt;a href=&quot;http://pythontestingcookbook.posterous.com/an-upbeat-review-of-python-testing-cookbook#comment&quot;&gt;Leave a comment&amp;nbsp;&amp;nbsp;&amp;raquo;&lt;/a&gt;

&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 08:21:00 +0000</pubDate>
</item>
<item>
	<title>Eli Bendersky: Python unit testing: parametrized test cases</title>
	<guid>http://eli.thegreenplace.net/2011/08/02/python-unit-testing-parametrized-test-cases/</guid>
	<link>http://eli.thegreenplace.net/2011/08/02/python-unit-testing-parametrized-test-cases/</link>
	<description>&lt;p&gt;Python&amp;#8217;s standard &lt;tt class=&quot;docutils literal&quot;&gt;unittest&lt;/tt&gt; library is great and I use it all the time. One thing missing from it, however, is a simple way of running parametrized test cases. In other words, you can&amp;#8217;t easily pass arguments into a &lt;tt class=&quot;docutils literal&quot;&gt;unittest.TestCase&lt;/tt&gt; from outside.&lt;/p&gt;
&lt;p&gt;Consider the use case: I have some &lt;tt class=&quot;docutils literal&quot;&gt;TestCase&lt;/tt&gt; I want to invoke several times, each time passing it a different argument.&lt;/p&gt;
&lt;p&gt;One approach often mentioned is create a base &lt;tt class=&quot;docutils literal&quot;&gt;TestCase&lt;/tt&gt; for the bulk functionality and derive sub-classes from it for variations. But this isn&amp;#8217;t flexible enough &amp;#8211; what if you want to add parameters from the outside (command-line) or test with a large amount of parameters?&lt;/p&gt;
&lt;p&gt;Fortunately, Python is dynamic enough (and &lt;tt class=&quot;docutils literal&quot;&gt;unittest&lt;/tt&gt; flexible enough) to allow a relatively straightforward solution.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a class that makes it possible:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;unittest&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ParametrizedTestCase&lt;/span&gt;(unittest.TestCase):
    &lt;span&gt;&amp;quot;&amp;quot;&amp;quot; TestCase classes that want to be parametrized should&lt;/span&gt;
&lt;span&gt;        inherit from this class.&lt;/span&gt;
&lt;span&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(&lt;span&gt;self&lt;/span&gt;, methodName=&lt;span&gt;'runTest'&lt;/span&gt;, param=&lt;span&gt;None&lt;/span&gt;):
        &lt;span&gt;super&lt;/span&gt;(ParametrizedTestCase, &lt;span&gt;self&lt;/span&gt;).__init__(methodName)
        &lt;span&gt;self&lt;/span&gt;.param = param

    @staticmethod
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parametrize&lt;/span&gt;(testcase_klass, param=&lt;span&gt;None&lt;/span&gt;):
        &lt;span&gt;&amp;quot;&amp;quot;&amp;quot; Create a suite containing all tests taken from the given&lt;/span&gt;
&lt;span&gt;            subclass, passing them the parameter 'param'.&lt;/span&gt;
&lt;span&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        testloader = unittest.TestLoader()
        testnames = testloader.getTestCaseNames(testcase_klass)
        suite = unittest.TestSuite()
        &lt;span&gt;for&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; testnames:
            suite.addTest(testcase_klass(name, param=param))
        &lt;span&gt;return&lt;/span&gt; suite
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Before I explain how this works, here&amp;#8217;s a sample usage. Let&amp;#8217;s define some test case that can be parametrized with an extra &lt;tt class=&quot;docutils literal&quot;&gt;param&lt;/tt&gt; argument:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestOne&lt;/span&gt;(ParametrizedTestCase):
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_something&lt;/span&gt;(&lt;span&gt;self&lt;/span&gt;):
        &lt;span&gt;print&lt;/span&gt; &lt;span&gt;'param ='&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.param
        &lt;span&gt;self&lt;/span&gt;.assertEqual(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_something_else&lt;/span&gt;(&lt;span&gt;self&lt;/span&gt;):
        &lt;span&gt;self&lt;/span&gt;.assertEqual(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note how nothing except inheriting &lt;tt class=&quot;docutils literal&quot;&gt;ParametrizedTestCase&lt;/tt&gt; is required. &lt;tt class=&quot;docutils literal&quot;&gt;self.param&lt;/tt&gt; automagically becomes available in all test methods (as well as in &lt;tt class=&quot;docutils literal&quot;&gt;setUp&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;tearDown&lt;/tt&gt;, etc.)&lt;/p&gt;
&lt;p&gt;And here is how to create and run parametrized instances of this test case:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;suite = unittest.TestSuite()
suite.addTest(ParametrizedTestCase.parametrize(TestOne, param=&lt;span&gt;42&lt;/span&gt;))
suite.addTest(ParametrizedTestCase.parametrize(TestOne, param=&lt;span&gt;13&lt;/span&gt;))
unittest.TextTestRunner(verbosity=&lt;span&gt;2&lt;/span&gt;).run(suite)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As expected, we get:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;test_something (__main__.TestOne) ... param = 42
ok
test_something_else (__main__.TestOne) ... ok
test_something (__main__.TestOne) ... param = 13
ok
test_something_else (__main__.TestOne) ... ok

----------------------------------------------------------------------
Ran 4 tests in 0.000s

OK
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now, a word on how &lt;tt class=&quot;docutils literal&quot;&gt;ParametrizedTestCase&lt;/tt&gt; works. It&amp;#8217;s a subclass of &lt;tt class=&quot;docutils literal&quot;&gt;unittest.TestCase&lt;/tt&gt;, and the parametrization is done by defining its own constructor, which is similar to &lt;tt class=&quot;docutils literal&quot;&gt;TestCase&lt;/tt&gt;&amp;#8217;s constructor but adds an extra &lt;tt class=&quot;docutils literal&quot;&gt;param&lt;/tt&gt; argument. This &lt;tt class=&quot;docutils literal&quot;&gt;param&lt;/tt&gt; is then saved as the instance attribute &lt;tt class=&quot;docutils literal&quot;&gt;self.param&lt;/tt&gt;. Test cases interested in being parametrized should then derive from &lt;tt class=&quot;docutils literal&quot;&gt;ParametrizedTestCase&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To actually create the parametrized test, &lt;tt class=&quot;docutils literal&quot;&gt;ParametrizedTestCase.parametrize&lt;/tt&gt; should be invoked. It accepts two arguments:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;A subclass of &lt;tt class=&quot;docutils literal&quot;&gt;ParametrizedTestCase&lt;/tt&gt; &amp;#8211; essentially our custom test case class&lt;/li&gt;
&lt;li&gt;The parameter we want to pass to this instance of the test case&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And then uses the test name discovery facilities available in &lt;tt class=&quot;docutils literal&quot;&gt;unittest.TestLoader&lt;/tt&gt; to create the tests and parametrize them.&lt;/p&gt;
&lt;p&gt;As you can see in the usage example, the approach is easy to use and works quite well. I have a couple of qualms with it, however:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It directly calls &lt;tt class=&quot;docutils literal&quot;&gt;TestCase.__init__&lt;/tt&gt;, which isn&amp;#8217;t an officially documented feature.&lt;/li&gt;
&lt;li&gt;When different parametrized instances of our test case run, we can&amp;#8217;t know which parameter was passed. I suppose some hack can be crafted that attaches the parameter value to the test name, but this is very much application-specific.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m really interested in feedback on this post. Could this be done better? Any alternative approaches to achieve the same effect?&lt;/p&gt;
&lt;img src=&quot;http://eli.thegreenplace.net/?ak_action=api_record_view&amp;id=2613&amp;type=feed&quot; alt=&quot;&quot; /&gt;

&lt;p&gt;Related posts:&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2006/03/03/unit-testing-framework-cxxtext/&quot; rel=&quot;bookmark&quot; title=&quot;Permanent Link: unit testing framework &amp;#8211; cxxtext&quot;&gt;unit testing framework &amp;#8211; cxxtext&lt;/a&gt; &lt;small&gt;After doing some research on unit testing frameworks for my...&lt;/small&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2003/07/01/testing-and-test-benches/&quot; rel=&quot;bookmark&quot; title=&quot;Permanent Link: testing and test-benches&quot;&gt;testing and test-benches&lt;/a&gt; &lt;small&gt;Testing (software, or hardware) code can be a very daunting...&lt;/small&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 06:29:13 +0000</pubDate>
</item>
<item>
	<title>Fabio Zadrozny: IPython &amp;amp; PyDev</title>
	<guid>http://feedproxy.google.com/~r/blogspot/pydev/~3/0K3DdT7jZxA/ipython-pydev.html</guid>
	<link>http://feedproxy.google.com/~r/blogspot/pydev/~3/0K3DdT7jZxA/ipython-pydev.html</link>
	<description>In the current nightly build (see: &lt;a href=&quot;http://pydev.org/download.html&quot;&gt;http://pydev.org/download.html&lt;/a&gt; to get it), IPython can be used as the backend for the PyDev interactive console. &lt;br /&gt;&lt;br /&gt;IPython is a Python shell that provides many improvements over the standard Python shell (more details may be found at &lt;a href=&quot;http://ipython.org/&quot;&gt;http://ipython.org/&lt;/a&gt; ).&lt;br /&gt;&lt;br /&gt;To use it, install IPython (0.10.x or 0.11) in your Python interpreter (if you use easy-install, just do easy_install ipython), make sure that the IPython paths are properly added in your interpreter configuration inside of PyDev ( &lt;a href=&quot;http://pydev.org/manual_101_interpreter.html&quot;&gt;http://pydev.org/manual_101_interpreter.html&lt;/a&gt; ) and start up the interactive console in PyDev ( &lt;a href=&quot;http://pydev.org/manual_adv_interactive_console.html&quot;&gt;http://pydev.org/manual_adv_interactive_console.html&lt;/a&gt; ). If all is properly configured, the interactive shell should use IPython as the backend (if it's not found, it'll fallback to the standard PyDev shell and warn that IPython could not be found).&lt;br /&gt;&lt;br /&gt;Another improvement in the shell is that the output for a long running command will now be printed while it's executing, and not only after it returns.&lt;br /&gt;&lt;br /&gt;I'm waiting for feedback to know if there's something missing in the integration before a final release is provided with the integration...&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/8550962-8552482294843565517?l=pydev.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/pf3a_HTck9-k5whuyfdxyMOddRg/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/pf3a_HTck9-k5whuyfdxyMOddRg/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/pf3a_HTck9-k5whuyfdxyMOddRg/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/pf3a_HTck9-k5whuyfdxyMOddRg/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/blogspot/pydev/~4/0K3DdT7jZxA&quot; height=&quot;1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 02 Aug 2011 06:59:47 +0000</pubDate>
</item>
<item>
	<title>Greg Taylor: A MUD behind a proxy is... potentially great</title>
	<guid>http://gc-taylor.com/blog/2011/8/2/mud-behind-proxy-potentially-great/</guid>
	<link>http://gc-taylor.com/blog/2011/8/2/mud-behind-proxy-potentially-great/</link>
	<description>&lt;p&gt;
	My perpetual tinker project is a &lt;a href=&quot;https://github.com/gtaylor/dott&quot;&gt;MUD server&lt;/a&gt; that may or may not ever see the light of day. In recent adventures, I pursued &lt;a href=&quot;http://feeds.feedburner.com/blog/2011/7/20/exocet-makes-code-reloading-easy/&quot;&gt;using Exocet&lt;/a&gt; to make my goal of a mostly interruption-less experience for the players a reality. The attempt worked in most cases, but failed horribly in a few others. The failures were bad enough to make me scrap the idea. The next best thing I could think of is to stick a proxy server in front of the MUD server.&lt;/p&gt;
&lt;p&gt;
	The proxy would handle all of the telnet protocol and session stuff, and just dumbly pipe input into the MUD server through Twisted's &lt;a href=&quot;http://twistedmatrix.com/documents/current/api/twisted.protocols.amp.html&quot;&gt;AMP&lt;/a&gt;&amp;nbsp;(a really neat, simple, 2-way protocol). When a user inputs something, the proxy says to MUD server &amp;quot;A session attached to an Object with an ID of &amp;quot;a20dl3da&amp;quot; input this. The MUD server would then have any object matches route the input through whatever command tables they are subscribed to, causing things to happen in-game.&lt;/p&gt;
&lt;p&gt;
	Communication back to the proxy would happen whenever an an Object's emit method (IE: print to any sessions controlling this object). The proxy would see if it had a session attached to the given object, and call the TelnetProtocol's msg() method with the output.&lt;/p&gt;
&lt;h2&gt;
	Neat thing #1: Strictly enforced separation&lt;/h2&gt;
&lt;p&gt;
	Convention typically dictates that connection and protocol-level things be kept separate from business logic and other more interesting things. However, having separate proxy and MUD server sections of the codebase really enforces that separation in my mind.&lt;/p&gt;
&lt;p&gt;
	Keeping session and protocol-level gunk confined to the proxy makes the MUD server easier to understand, maintain, and test. I find this layout a little easier to mentally digest.&lt;/p&gt;
&lt;p&gt;
	The other cool thing in the future is that adding support for other protocols (websockets, anyone?) can be handled in the proxy, hooking the input/output into AMP commands. Protocols are already in their own island with Twisted, but this separation is much more strictly enforced under this arrangement (which again, I like). The MUD server can speak in a protocol-agnostic format like Markdown or BBcode, and the protocols can format the output for whatever they are serving.&lt;/p&gt;
&lt;h2&gt;
	Neat thing #2: Neither proxy nor MUD server care if the other dies&lt;/h2&gt;
&lt;p&gt;
	Consider the following two scenarios:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;em&gt;MUD server dies, proxy stays up.&lt;/em&gt;&lt;br /&gt;
		The proxy accepts connections, but all input is left with an error message telling the user to stay put until the MUD comes back up. All sessions are maintained, and Twisted's &lt;a href=&quot;http://twistedmatrix.com/documents/current/core/howto/clients.html#auto4&quot;&gt;auto-reconnection facilities&lt;/a&gt; continuously tries to get back in touch with the MUD. When it does come back up, business continues as usual without interruption. The MUD server doesn't care about sessions, and the proxy doesn't care about in-game objects, rooms, and etc.&lt;/li&gt;
	&lt;li&gt;
		&lt;em&gt;The proxy goes down, but the MUD server stays up.&lt;/em&gt;&lt;br /&gt;
		This one isn't quite as neat. In theory, this scenario should be extremely rare. If the proxy goes down, the user is unable to connect to the running game. They'll need to re-connect once the proxy comes back up. However, the MUD server continues about its business in the meantime, so mobs are moving, the economy is ticking, etc. Once the proxy is back, it re-connects and players can interact with the game world again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
	Neat thing #3: We don't need to bother with code re-loading&lt;/h2&gt;
&lt;p&gt;
	The last, and most important, neat thing is that because of neat things #1 and #2, we don't need to implement code re-loading. If both proxy and MUD server are monitored/auto-restarted by something like &lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt;, the latest version of the game code can be loaded by silently shutting down the MUD server (but leaving the proxy up). Supervisor (or runit, or launchctl, or whatever) sees the server process down, restarts it, and the proxy automatically re-connects as soon as it's back up.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	The end result is that the user may get an error or two if they're trying to type stuff while the server is down, but the outage should be short and potentially completely unnoticed by some of the players. We don't need to worry about all of the messyness associated with code reloading, and we can keep the MUD server focused on game logic.&lt;/p&gt;
&lt;h2&gt;
	Code to come&lt;/h2&gt;
&lt;p&gt;
	I've got a proof-of-concept for this arrangement &amp;quot;working&amp;quot;, but it'll be some time before I am able to restore the existing features of the MUD server to work with the new proxy + MUD server model. I'll continue to write posts about progress as it happens.&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 05:41:56 +0000</pubDate>
</item>
<item>
	<title>Eli Bendersky: Length-prefix framing for protocol buffers</title>
	<guid>http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/</guid>
	<link>http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/</link>
	<description>&lt;p&gt;I personally find Google&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/apis/protocolbuffers/&quot;&gt;protocol buffers&lt;/a&gt; library (protobuf) extremely convenient for efficient serialization and de-serialization of structured data from multiple programming languages. protobufs are perfect for TCP/IP links in general and socket-based IPC in particular.&lt;/p&gt;
&lt;p&gt;Framing (the method of dividing a long stream of bytes into discrete messages) isn&amp;#8217;t immediately obvious with protobuf. What you get from a protobuf serialization is a binary buffer of data. You almost certainly want to send more than one such buffer over time, so how does your peer know when one message ends and another starts?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve seen opinions online that failing to specify this is a shortcoming of protobuf. I disagree. The official protobuf documentation clearly mentions this issue, &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/apis/protocolbuffers/docs/techniques.html&quot;&gt;saying&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
[...] If you want to write multiple messages to a single file or stream, &lt;strong&gt;it is up to you to keep track of where one message ends and the next begins&lt;/strong&gt;. The Protocol Buffer wire format is not self-delimiting, so protocol buffer parsers cannot determine where a message ends on their own. &lt;strong&gt;The easiest way to solve this problem is to write the size of each message before you write the message itself&lt;/strong&gt;. When you read the messages back in, you read the size, then read the bytes into a separate buffer, then parse from that buffer. [...]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This technique is called &lt;em&gt;length-prefix framing&lt;/em&gt;. It&amp;#8217;s efficient in both space and time, and is trivial to understand and implement as I hope to show in this article.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start with a diagram that demonstrates how a message goes from being created to being sent into a TCP/IP socket:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;http://eli.thegreenplace.net/wp-content/uploads/2011/08/lengthprefix1.png&quot; class=&quot;align-center&quot; src=&quot;http://eli.thegreenplace.net/wp-content/uploads/2011/08/lengthprefix1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We have a protobuf message filled in with data &lt;a class=&quot;footnote-reference&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id5&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; The steps are:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;Serialization: protobuf handles this for us, converting the message into binary data (essentially a string of byte values).&lt;/li&gt;
&lt;li&gt;Framing: the length of the serialized string of data is known. This length is packed into a fixed encoding and is prepended to the serialized data.&lt;/li&gt;
&lt;li&gt;Sending: the combined length + data are sent into the socket.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is neither a protobuf nor socket tutorial, so I&amp;#8217;ll just focus on step 2 here. What does &amp;quot;length is packed into a fixed encoding&amp;quot; mean?&lt;/p&gt;
&lt;p&gt;The length is just an integer of a finite size. Suppose for the sake of discussion we won&amp;#8217;t be sending messages larger than 4 GiB in size &lt;a class=&quot;footnote-reference&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id6&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;. Then all message sizes fit into 4 bytes. We still have to decide which byte gets sent first. Let&amp;#8217;s use the high byte first (also known as big-endian), to be true to the &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Endianness&quot;&gt;network byte order&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What about the receiver? How does one receive full messages with the scheme described above. Very simply &amp;#8211; just follow the steps in reverse &lt;a class=&quot;footnote-reference&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id7&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;First receive the length. Since it&amp;#8217;s fixed size we know how many bytes we need to take off the wire. Using the example encoding described above, we receive 4 bytes and assuming they represent a 32-bit integer in big-endian order, decode them to get the length.&lt;/li&gt;
&lt;li&gt;Receive exactly &lt;em&gt;length&lt;/em&gt; bytes &amp;#8211; this is the serialized data.&lt;/li&gt;
&lt;li&gt;Use protobuf&amp;#8217;s de-serialization services to convert the serialized data into a message.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;#8217;s about it &amp;#8211; we have a fully specified protocol. Given an initial state in which no data has yet been exchanged, we can send and receive arbitrary amounts of messages between peers, safely and conveniently.&lt;/p&gt;
&lt;p&gt;To make this even clearer, I will now present some Python code that implements this protocol. Here&amp;#8217;s how we send a message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;send_message&lt;/span&gt;(sock, message):
    &lt;span&gt;&amp;quot;&amp;quot;&amp;quot; Send a serialized message (protobuf Message interface)&lt;/span&gt;
&lt;span&gt;        to a socket, prepended by its length packed in 4&lt;/span&gt;
&lt;span&gt;        bytes (big endian).&lt;/span&gt;
&lt;span&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    s = message.SerializeToString()
    packed_len = struct.pack(&lt;span&gt;'&amp;gt;L'&lt;/span&gt;, &lt;span&gt;len&lt;/span&gt;(s))
    sock.sendall(packed_len + s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The three lines that constitute this function are exactly the three protocol steps outlined in the diagram: serialize, pack, send. There really isn&amp;#8217;t more to it.&lt;/p&gt;
&lt;p&gt;Receiving is just a tad more complicated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_message&lt;/span&gt;(sock, msgtype):
    &lt;span&gt;&amp;quot;&amp;quot;&amp;quot; Read a message from a socket. msgtype is a subclass of&lt;/span&gt;
&lt;span&gt;        of protobuf Message.&lt;/span&gt;
&lt;span&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    len_buf = socket_read_n(sock, &lt;span&gt;4&lt;/span&gt;)
    msg_len = struct.unpack(&lt;span&gt;'&amp;gt;L'&lt;/span&gt;, len_buf)[&lt;span&gt;0&lt;/span&gt;]
    msg_buf = socket_read_n(sock, msg_len)

    msg = msgtype()
    msg.ParseFromString(msg_buf)
    &lt;span&gt;return&lt;/span&gt; msg
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since only the user of &lt;tt class=&quot;docutils literal&quot;&gt;get_message&lt;/tt&gt; knows the actual type of the protobuf message, it (the class) is passed as the &lt;tt class=&quot;docutils literal&quot;&gt;msgtype&lt;/tt&gt; argument &lt;a class=&quot;footnote-reference&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id8&quot; id=&quot;id4&quot;&gt;[4]&lt;/a&gt;. We also use a utility function for reading an exact amount of data from a socket. Here it is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;socket_read_n&lt;/span&gt;(sock, n):
    &lt;span&gt;&amp;quot;&amp;quot;&amp;quot; Read exactly n bytes from the socket.&lt;/span&gt;
&lt;span&gt;        Raise RuntimeError if the connection closed before&lt;/span&gt;
&lt;span&gt;        n bytes were read.&lt;/span&gt;
&lt;span&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    buf = &lt;span&gt;''&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; n &amp;gt; &lt;span&gt;0&lt;/span&gt;:
        data = sock.recv(n)
        &lt;span&gt;if&lt;/span&gt; data == &lt;span&gt;''&lt;/span&gt;:
            &lt;span&gt;raise&lt;/span&gt; RuntimeError(&lt;span&gt;'unexpected connection close'&lt;/span&gt;)
        buf += data
        n -= &lt;span&gt;len&lt;/span&gt;(data)
    &lt;span&gt;return&lt;/span&gt; buf
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Sure, Python has its cute way of making everything look short and simple, but I&amp;#8217;ve also implemented similar code in C++ and Java, and it&amp;#8217;s not much longer or more complicated there. While I ignored efficiency here (freely copying buffers, which may be large), the protobuf API actually provides all the means necessary to write copy-free code, if you&amp;#8217;re concerned about runtime. In this article my optimization was for simplicity and clarity.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;http://eli.thegreenplace.net/wp-content/uploads/hline.jpg&quot; class=&quot;align-center&quot; src=&quot;http://eli.thegreenplace.net/wp-content/uploads/hline.jpg&quot; /&gt;&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id5&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;label&quot; /&gt;
&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;protobuf messages can describe arbitrary structured data relatively easily, but this is a topic for another day.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id6&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;label&quot; /&gt;
&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;If this is too restrictive for you, you should really re-consider your protocol. Also keep in mind that protobuf is not recommended for messages larger than 1 MiB or so anyway.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id7&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;label&quot; /&gt;
&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id3&quot;&gt;[3]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Note how &lt;em&gt;prepending&lt;/em&gt; (rather than appending) the length to the message paid off here &amp;#8211; the receiver first receives the length, which allows him to know how long a message to expect.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id8&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;label&quot; /&gt;
&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers/#id4&quot;&gt;[4]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;If you&amp;#8217;re used to less dynamic languages where classes aren&amp;#8217;t usually passed around into functions and this piece of Python hackery confuses you, feel free to ignore it. I included it just for symmetry &amp;#8211; &lt;tt class=&quot;docutils literal&quot;&gt;send_message&lt;/tt&gt; takes a message, so I wanted &lt;tt class=&quot;docutils literal&quot;&gt;get_message&lt;/tt&gt; to return the message. We can make it simpler by just returning &lt;tt class=&quot;docutils literal&quot;&gt;msg_buf&lt;/tt&gt; &amp;#8211; the &lt;tt class=&quot;docutils literal&quot;&gt;ParseFromString&lt;/tt&gt; call can be done outside.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;img src=&quot;http://eli.thegreenplace.net/?ak_action=api_record_view&amp;id=2610&amp;type=feed&quot; alt=&quot;&quot; /&gt;

&lt;p&gt;Related posts:&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2011/03/20/boost-asio-with-protocol-buffers-code-sample/&quot; rel=&quot;bookmark&quot; title=&quot;Permanent Link: Boost.Asio with Protocol Buffers code sample&quot;&gt;Boost.Asio with Protocol Buffers code sample&lt;/a&gt; &lt;small&gt;Recently I implemented in C++ a mini-project in order to...&lt;/small&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2009/08/12/framing-in-serial-communications/&quot; rel=&quot;bookmark&quot; title=&quot;Permanent Link: Framing in serial communications&quot;&gt;Framing in serial communications&lt;/a&gt; &lt;small&gt; Introduction In the previous post we&amp;#8217;ve seen how to...&lt;/small&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2005/11/22/when-bit-endianness-matters/&quot; rel=&quot;bookmark&quot; title=&quot;Permanent Link: when bit endianness matters&quot;&gt;when bit endianness matters&lt;/a&gt; &lt;small&gt;The smallest addresable information unit in a computer is a...&lt;/small&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 02 Aug 2011 03:09:26 +0000</pubDate>
</item>
<item>
	<title>Sandro Tosi: And what am I now? A Python Core Developer!</title>
	<guid>http://sandrotosi.blogspot.com/2011/08/and-what-am-i-now-python-core-developer.html</guid>
	<link>http://sandrotosi.blogspot.com/2011/08/and-what-am-i-now-python-core-developer.html</link>
	<description>Yeah, since a couple of hours I'm officially a Python Core Developer (and &lt;a href=&quot;http://www.python.org/dev/committers&quot;&gt;this&lt;/a&gt; confirms it, so I'm not dreaming!)&lt;br /&gt;&lt;br /&gt;I'm now in that mixed state in between the happiness and the fear I'll do stupid mistakes and I'll be&amp;nbsp;ashamed&amp;nbsp;of myself. But hey, i&lt;i&gt;t's only those who do nothing that make no mistakes&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Interesting days ahead, a lot of procedures to learn and get used to, hopefully also a lot of bugs fixed :) That's for sure, I'll go step by step, following the &lt;i&gt;better be safe than sorry&lt;/i&gt; rule.&lt;br /&gt;&lt;br /&gt;At the end, I'd like to thank all the people at Python that made this possible, they are quite a number, so if I'd named them, I surely forgot someone, and it would be unfair! So well, you know who you are, and this big &lt;b&gt;THANK YOU&lt;/b&gt; is yours :)&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/462006525194985726-6690929231258332780?l=sandrotosi.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 02 Aug 2011 01:13:40 +0000</pubDate>
</item>
<item>
	<title>Phillip J. Eby: Is WSGI Lite a Library or a Protocol? (And Why You Should Care)</title>
	<guid>http://feedproxy.google.com/~r/pje-on-programming/~3/-xrv6pYqpIw/is-wsgi-lite-library-or-protocol-and.html</guid>
	<link>http://feedproxy.google.com/~r/pje-on-programming/~3/-xrv6pYqpIw/is-wsgi-lite-library-or-protocol-and.html</link>
	<description>&lt;p&gt;In retrospect, my article yesterday about WSGI Lite made a rather glaring mistake: instead of carefully laying out the background rationale and explaining where WSGI Lite fits in to today's Python world, I threw a bunch of links at people and went &quot;Whee!&amp;nbsp; It's neat!&quot;&lt;/p&gt;
&lt;p&gt;So, in hindsight, I should've expected reactions like &quot;huh?&quot;&amp;nbsp; &quot;wha?&quot; and &quot;don't we already have WebOb and Werkzeug?&quot;&lt;/p&gt;
&lt;p&gt;My bad, guys.&amp;nbsp; I totally failed to highlight the really crucial point about WSGI Lite, and that is the distinction between &quot;wsgi_lite&quot; (the proof-of-concept/future reference library) and &quot;WSGI Lite&quot; (the PEPpable protocol).&lt;/p&gt;
&lt;p&gt;See, in my mind, &quot;wsgi_lite&quot; the library is no more a competitor to WebOb and Werkzeug than the standard library's &quot;wsgiref&quot; package is a competitor to mod_wsgi: just because it has a server in there, doesn't mean it competes with servers!&lt;/p&gt;
&lt;p&gt;I think it's a pretty safe bet to say that most WSGI (protocol) code does not use wsgiref (library), except maybe indirectly via something else.&amp;nbsp; And the same thing may well end up being true of wsgi_lite (the library) and WSGI Lite (the protocol).&lt;/p&gt;
&lt;p&gt;Yeah, it's a little confusing.&amp;nbsp; I get that now.&amp;nbsp; When I was first writing the code, I called it &quot;WSGI 2&quot;, and the decorators were &quot;@wsgi2&quot;&amp;nbsp;&amp;nbsp;and &quot;@wsgi1&quot;, instead of &quot;@lite&quot; and &quot;lighten()&quot;.&amp;nbsp; I was even having the decorators change the &quot;wsgi.version&quot; environment key from (1,0) to (2,0) and back.&lt;/p&gt;
&lt;p&gt;However, as the work progressed, the versioning didn't make a lot of sense to me, because in a sense, the core bits of the protocol weren't changing.&amp;nbsp; Instead, there were a handful of small protocols that, put together, make a new way of doing WSGI.&amp;nbsp; So I ended up deciding to call it &quot;WSGI Lite&quot;, and dropped the version fudging.&lt;/p&gt;
&lt;p&gt;But if you look at what is happening with the actual underlying protocol, I really am proposing something like a WSGI 2 here, or probably more like a 1.1.&amp;nbsp; (Sort of.)&amp;nbsp; The key point is that it's a protocol that can work in &lt;em&gt;today's&lt;/em&gt; WSGI stacks, without needing a massive rewrite effort.&lt;/p&gt;
&lt;p&gt;Granted, this means that if you have some pet gripes with WSGI, then Lite may or may not be able to solve them.&amp;nbsp; A couple people have approached me privately about those issues, and I'd like to start hashing them out on the Web-SIG shortly.&lt;/p&gt;
&lt;p&gt;But in the meantime, I'd like to take the rest of this article to lay out just what (and &lt;strong&gt;why&lt;/strong&gt;) WSGI Lite, &lt;em&gt;the protocol&lt;/em&gt;, is.&amp;nbsp; (As opposed to wsgi_lite, the proof-of-concept implementation of the protocol.)&lt;/p&gt;&lt;h4&gt;Why A New Protocol?&lt;/h4&gt;
&lt;p&gt;Because WSGI &lt;em&gt;rots your brain&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Or, to put it less dramatically, it is damn near impossible to write correct WSGI middleware because there are too darn many things to think about.&lt;/p&gt;
&lt;p&gt;In the Reddit thread about Armin's article, one person posted a bunch of links to the various patches they had to do to a piece of WSGI code in order to make it work correctly with various corner cases in the protocol, as bugs cropped up in interaction with other WSGI code.&lt;/p&gt;
&lt;p&gt;And I took one quick look at one of those patches, and saw that it &lt;em&gt;still had bugs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Granted, it was a resource-leak bug, but that's not the point.&amp;nbsp; It shouldn't be so frickin' easy to make that kind of mistake.&amp;nbsp; (And the author was not exactly a newbie to either WSGI or web programming.)&lt;/p&gt;
&lt;p&gt;And as I started writing my proof-of-concept (for what I originally thought of as &quot;WSGI 2&quot; rather than &quot;WSGI Lite&quot;), I discovered all kinds of &lt;strong&gt;other&lt;/strong&gt; mistakes that people could make in their middleware, that had never even &lt;em&gt;occurred&lt;/em&gt; to me before.&lt;/p&gt;
&lt;p&gt;Even Ian Bicking, author of WebOb, realized after reading the WSGI Lite docs that WebOb contained a latent bug I described there!&lt;/p&gt;
&lt;p&gt;So, something &lt;em&gt;has&lt;/em&gt; to be done.&amp;nbsp; WebOb and Werkzeug are great libraries, but if libraries could solve the problem, it would already be solved.&amp;nbsp; That's why wsgi_lite (the &lt;strong&gt;library&lt;/strong&gt;), is really just a test bed for WSGI Lite, (the &lt;strong&gt;protocol&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;And the aim of WSGI Lite is not to solve all WSGI 1 problems, nor even the entire subset of WSGI 1 problems that can be addressed in a reasonably performant, backwards-compatible way using a pair of decorators.&lt;/p&gt;
&lt;p&gt;Rather, the aim is to eliminate certain key &lt;strong&gt;obstacles&lt;/strong&gt; to solving those problems.&lt;/p&gt;&lt;h4&gt;Protocols, WSGI, and Game Theory&lt;/h4&gt;
&lt;p&gt;Back when I first proposed the idea that became WSGI (late 2003), the goal of the Web-SIG was to define standard &quot;request&quot; and &quot;response&quot; objects for the standard library.&lt;/p&gt;
&lt;p&gt;So my counter-proposal to instead define a &lt;em&gt;protocol&lt;/em&gt;, and not actually put any &lt;em&gt;code&lt;/em&gt; for the protocol into the standard library, may have seemed a bit loopy to some folks.&amp;nbsp; Perhaps a bit like, &quot;let's solve this problem by &lt;em&gt;not&lt;/em&gt; solving this problem!&quot;&lt;/p&gt;
&lt;p&gt;But the reason that I did it -- and the reason it ended up working so well that damn near every dynamic language ends up more-or-less cloning WSGI these days -- is because of &lt;strong&gt;game theory&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Essentially, there was never any serious chance that a bunch of web framework developers with investment in existing APIs were ever going to get together and agree on the One True Request and One True Response: there were just too many differences in fundamental approaches, and way too much opportunity for bikeshedding.&lt;/p&gt;
&lt;p&gt;In game theory terms, you could say there was no &lt;a href=&quot;http://en.wikipedia.org/wiki/Focal_point_%28game_theory%29&quot;&gt;Schelling Point&lt;/a&gt;.&amp;nbsp; As Wikipedia puts it:&lt;/p&gt;
&lt;blockquote dir=&quot;ltr&quot;&gt;
&lt;p&gt;Consider a simple example: two people unable to communicate with each other are each shown a panel of four squares and asked to select one; if and only if they both select the &lt;i&gt;same&lt;/i&gt; one, they will each receive a prize. Three of the squares are blue and one is red. Assuming they each know nothing about the other player, but that they each do want to win the prize, then they will, reasonably, &lt;i&gt;both&lt;/i&gt; choose the red square. Of course, the red square is not in a sense a &lt;i&gt;better&lt;/i&gt; square; they could win by both choosing any square.&amp;nbsp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, in trying to design the One True Request and One True Response, there was no single obvious &quot;square&quot; to choose: everything was up for grabs, so nobody could win the &quot;prize&quot; (i.e., the benefits of having a One True anything in common).&lt;/p&gt;
&lt;p&gt;So what I did with my WSGI proposal was deliberately &lt;em&gt;create&lt;/em&gt; a Schelling Point: a single red square in a board full of blues.&lt;/p&gt;
&lt;p&gt;And the &lt;em&gt;way&lt;/em&gt; that I did it, was to specifically remove &lt;strong&gt;any&lt;/strong&gt; semblance of an API that would make WSGI look like another blue square.&lt;/p&gt;
&lt;p&gt;Voila: the Web-SIG was able to shift from discussions about what color to paint the bikeshed, to substantive discussions about the guts of HTTP and what requirements we had for interfacing with it.&lt;/p&gt;
&lt;p&gt;Now, notice that I'm &lt;em&gt;not&lt;/em&gt; saying that I came up with WSGI by myself and I was a genius.&amp;nbsp; What I'm saying is, I gave the Web-SIG something to &lt;em&gt;collaborate&lt;/em&gt; on, instead of something to &lt;em&gt;compete&lt;/em&gt; over.&lt;/p&gt;
&lt;p&gt;Let me repeat that: something to &lt;strong&gt;collaborate on&lt;/strong&gt;, instead of something to &lt;strong&gt;compete over&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I could not have written the WSGI PEP by myself: I didn't have nearly enough information.&amp;nbsp; But the Web-SIG, in &lt;em&gt;collaboration&lt;/em&gt; mode, could.&lt;/p&gt;
&lt;p&gt;So what does all this have to do with WSGI Lite?&lt;/p&gt;
&lt;p&gt;Well, once again, the idea is to create a collaborative Schelling Point: a &lt;em&gt;protocol&lt;/em&gt;, rather than an API.&amp;nbsp; Because, once again, no one can agree on The One True WSGI Wrapper, when all we have are competing implementations with distinct APIs.&lt;/p&gt;
&lt;p&gt;Granted, I may have shot myself in the foot this time, by starting with a proof-of-concept library rather than a PEP explaining the protocols!&lt;/p&gt;
&lt;p&gt;Unfortunately, due to the nature of the requirements, I couldn't be &lt;strong&gt;sure&lt;/strong&gt; the protocols would work without prototyping an implementation first, and still can't be sure the protocols &lt;em&gt;really&lt;/em&gt; work without some community testing.&amp;nbsp; (And the shape of the protocols themselves evolved &lt;em&gt;considerably&lt;/em&gt; over the last three days of implementing, documenting, realizing something sucked, then fixing it and trying again!)&lt;/p&gt;
&lt;p&gt;But what are these protocols exactly?&amp;nbsp; What do they do, and why are they important?&lt;/p&gt;&lt;h4&gt;The First Protocol: Calling Convention&lt;/h4&gt;
&lt;p&gt;The WSGI Lite protocol consists of a few basic elements working together:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A revised calling convention and return protocol
&lt;/li&gt;
&lt;li&gt;A server API extension for resource closing
&lt;/li&gt;
&lt;li&gt;An &quot;argument binding&quot; protocol
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first of these things is something that's been proposed for a long time, and there seems to be fairly widespread consensus that a Rack-style calling convention is a good idea.&amp;nbsp; WebOb, for example, already has some APIs that work on that calling convention, and I've never heard anybody saying that calling convention was &lt;em&gt;bad&lt;/em&gt;, or that the current WSGI convention is &lt;em&gt;better&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(Actually, the closest thing I've seen to somebody saying that, would be in the Hacker News thread about yesterday's article: somebody thought that WSGI Lite forces async code to use greenlets.&amp;nbsp; But that's a mistake, because WSGI Lite only requires greenlets or threads for code that uses write().&amp;nbsp; WSGI Lite response bodies can still be produced just as asynchronously as a standard WSGI response body can.)&lt;/p&gt;
&lt;p&gt;Anyway, so, the first protocol is well-known to WSGIans, and largely uncontroversial, hence the &quot;uhh..&amp;nbsp; don't we already have that?&quot; reaction from some quarters.&amp;nbsp; What's been lacking is a co-ordinated way to &lt;em&gt;move forward&lt;/em&gt; on that.&lt;/p&gt;
&lt;p&gt;To put it another way, since that protocol lacks any &quot;official&quot; status or name, it's not really possible to use it as a Schelling Point of co-ordination between users and library authors.&amp;nbsp; Ian can't point to WebOb and say, &quot;WebOb lets you use the [thingy] protocol&quot;, instead, he has to say, &quot;WebOb is cool, you should use it.&quot;&amp;nbsp; Meanwhile, Armin is over there on the other side of the room, saying, &quot;Werkzeug is cool, you should use it&quot; too.&lt;/p&gt;
&lt;p&gt;Meanwhile, the poor user is left in the middle of the room, scratching his or her head and going, &quot;Uh, so what should I use now?&quot;, with respect to any &quot;enhanced WSGI&quot; APIs.&lt;/p&gt;
&lt;p&gt;So, as far as this first sub-protocol is concerned, the ultimate point of WSGI Lite is going to be to nail down and &quot;bless&quot; a detailed and &lt;strong&gt;specific&lt;/strong&gt; flavor of the calling protocol, to provide that co-ordination point for libraries to say what they offer to people, and for people to make choices about using them.&lt;/p&gt;
&lt;p&gt;I seriously doubt that this is a very controversial proposal.&amp;nbsp; After all, many people have said they want this calling protocol, and some leading WSGIans (hm, that term even has the word &quot;Ian&quot; in it!) have actually implemented more or less that protocol in their libraries.&lt;/p&gt;
&lt;p&gt;What's more, people have been asking &lt;em&gt;me&lt;/em&gt; to do something about getting this protocol &quot;out there&quot;, reflecting their subconscious realization that a Schelling Point is indeed &lt;strong&gt;needed&lt;/strong&gt; to do this, and that &lt;em&gt;I'm&lt;/em&gt; the most obvious &quot;red square&quot; for co-ordination where WSGI is concerned.&lt;/p&gt;
&lt;p&gt;So be it.&lt;/p&gt;
&lt;p&gt;That's why Armin's article finally pushed me to actually &lt;strong&gt;implement&lt;/strong&gt; something...&amp;nbsp; and that's when I discovered the need for the &lt;em&gt;other&lt;/em&gt; two sub-protocols in WSGI Lite.&lt;/p&gt;
&lt;h4&gt;The Second Protocol: Resource Management&lt;/h4&gt;
&lt;p&gt;See, as I was writing the decorators (called @wsgi2 and @wsgi1 at the time), I quickly began to notice that the &quot;close()&quot; part of WSGI was even more of a problem than I previously thought.&lt;/p&gt;
&lt;p&gt;I won't go into detail here about the specific problems, or the protocol itself, as they're both laid out in the README file for the wsgi_lite library.&amp;nbsp; Suffice to say here that under plain WSGI 1, resource closing is fragile because any one piece of middleware can inadvertently break the close() chain.&amp;nbsp; This is likely more of a problem for WSGI code running on non-refcounting Pythons, but it can cause headaches even on CPython.&lt;/p&gt;
&lt;p&gt;So, in order to solve that problem, I created a new resource closing protocol that allows applications to close multiple resources and to bypass broken WSGI 1 middleware.&lt;/p&gt;
&lt;p&gt;This, I also expect to be a fairly uncontroversial protocol proposal.&amp;nbsp; The problem it addresses is not widely understood, nor is there a big popular push for it, but it's an annoying little problem that can bite you in the butt and make debugging difficult, especially on &quot;alternative implementations&quot; of Python.&lt;/p&gt;
&lt;p&gt;However, as I began trying to &lt;em&gt;use&lt;/em&gt; this new protocol, and writing the early documentation for it, I discovered even &lt;strong&gt;more&lt;/strong&gt; problems with WSGI!&lt;/p&gt;
&lt;p&gt;Specifically, I noticed that it was damn hard to document my new closing protocol in such a way that it could actually be used correctly without having to learn even &lt;strong&gt;more&lt;/strong&gt; arbitrary rules about what to call when and where to fetch it from.&lt;/p&gt;
&lt;p&gt;Indeed, I ended up with something that looked &lt;em&gt;just as hard to get right&lt;/em&gt;, as WSGI middleware was in the first place!&lt;/p&gt;
&lt;p&gt;And when I looked at it more closely, I saw two things that were going on.&lt;/p&gt;
&lt;p&gt;The first, was that most people don't realize when you pass a WSGI environment to a WSGI app, it's &lt;strong&gt;not yours any more&lt;/strong&gt;.&amp;nbsp; The application is allowed to clear it, put junk in it, or whatever.&amp;nbsp; So you absolutely &lt;strong&gt;cannot&lt;/strong&gt; use that environment dictionary once you pass it on.&lt;/p&gt;
&lt;p&gt;And this put the closing protocol in a bit of a bind, because the closing protocol needed to be &lt;em&gt;called late&lt;/em&gt; in an app or piece of middleware, but &lt;em&gt;retrieved early&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, if you wrote the &lt;em&gt;natural&lt;/em&gt; thing, the &lt;strong&gt;obvious&lt;/strong&gt; thing, and pulled the closing key out of the environment at the point nearest where you were going to &lt;em&gt;use&lt;/em&gt; it, then your code would have a latent bug in it.&lt;/p&gt;
&lt;p&gt;And that's just &lt;strong&gt;evil&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is the point at which I realized just how much &lt;strong&gt;brain rot&lt;/strong&gt; the bare WSGI protocol has in it: there are &lt;strong&gt;lots&lt;/strong&gt; of little things like this that will bite you in the butt, &lt;em&gt;punishing&lt;/em&gt; you for doing the simple, obvious, straightforward thing.&lt;/p&gt;
&lt;p&gt;And so that's when I realized that I needed...&lt;/p&gt;&lt;h4&gt;The Third Protocol: Argument/Extension Binding&lt;/h4&gt;
&lt;p&gt;See, the new resource closing protocol I came up with is not the only WSGI environment extension out there -- there are lots of others.&amp;nbsp; But they share a few potential issues in &lt;strong&gt;common&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Being pulled out of the environ at a point where they're no longer valid,
&lt;/li&gt;
&lt;li&gt;Having to write boilerplate to check for their existence, and fall back to something else, and
&lt;/li&gt;
&lt;li&gt;Mutually-incompatible decorators provided by libraries to fix problems 1 and 2!
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That is, even if a library provides decorator support for its particular WSGI extension, you generally can't use more than &lt;strong&gt;one&lt;/strong&gt; of them at a time.&lt;/p&gt;
&lt;p&gt;And so, the argument/extension binding protocol fixes this by providing an &lt;strong&gt;argument-level&amp;nbsp;&lt;/strong&gt;decoration protocol, to replace function-level decoration as the way to solve problems 1 and 2 in existing libraries.&lt;/p&gt;
&lt;p&gt;The idea here is that instead of trying to use a session decorator from library 1 and an authentication decorator from library 2, you can just use a single decorator with two keyword arguments.&lt;/p&gt;
&lt;p&gt;This idea evolved gradually, as I first wrote a &quot;@with_closing&quot; decorator specifically to address the resource closing issue, and then noticed what having lots of decorators like that would lead to.&amp;nbsp; (And, sure enough, existing WSGI library wrappers have mutually-incompatible decorators for these purposes.)&lt;/p&gt;
&lt;p&gt;Anyway, the argument binding protocol is basically a way to map keyword arguments to things that are derived in some way from the request environment.&amp;nbsp; It could be a parsed form, a session, an authenticated user, a cart...&amp;nbsp; you name it, you can have it.&lt;/p&gt;
&lt;p&gt;In other words, the idea is once again to have a Schelling Point where libraries can be used &lt;em&gt;collaboratively&lt;/em&gt;, instead of having to compete for users.&amp;nbsp; It also makes it easier for individual users to write one-offs for their particular application.&amp;nbsp; Writing a WSGI Lite argument binding is a few lines of code over top of whatever kind of request-based object(s) you have in your application, and you can then use them anywhere.&lt;/p&gt;
&lt;p&gt;Or...&amp;nbsp; and this is the bigger point: you can then &lt;strong&gt;split out&lt;/strong&gt; your nifty cart or session or whatever, and make it available to other users as a library, &lt;em&gt;without&lt;/em&gt; needing to know dip about decorators.&lt;/p&gt;
&lt;p&gt;And, again, it's a co-ordination point, because you can say, &quot;Here's my new session library - and it supports WSGI Lite argument binding.&quot;&amp;nbsp; The binding protocol becomes something that libraries have in common, allowing users to focus on functionality instead of screwing around with which color bikeshed the decorator is.&lt;/p&gt;
&lt;p&gt;Now, if you're not clear on the technical bits of what I'm on about here, the argument binding protocol is explained on the wsgi_lite homepage.&amp;nbsp; The basic idea, though, is that you can call @lite(keyword1=binding_rule1, keyword2=binding_rule2...), and bind your function's keyword arguments to objects like sessions, requests, carts, users, and arbitrary WSGI extensions.&amp;nbsp; The binding rules can be strings, callables, or sequences of the above, and the first rule that yields a result from the environment gets passed in to your function as a keyword argument.&amp;nbsp; And if no rule for that keyword yields a result, the keyword doesn't get passed to your function.&lt;/p&gt;
&lt;p&gt;So, this allows you to use normal Python function argument defaults to fall back on if you don't get the object you're looking for, &lt;em&gt;and&lt;/em&gt; it allows you to get a standard Python error when one of your arguments goes missing: you don't need to write code to check for the argument and raise your own error when it's missing.&lt;/p&gt;
&lt;p&gt;Under Python 3, it might be that the decorator could just use argument annotations to do the same thing (instead of duplicating argument names in the decorator) but I haven't tried that yet.&lt;/p&gt;
&lt;p&gt;The point, though, is that by defining a binding &lt;strong&gt;protocol&lt;/strong&gt;, you can use it in lots of different ways.&amp;nbsp; Given the protocol I've specified, you could go out there right &lt;em&gt;now&lt;/em&gt; and write yourself a Python 3 decorator that looks for binding rules in argument annotations, and applies them according to the rules of the binding protocol.&amp;nbsp; And users of your decorator would immediately be able to use anybody else's session, request, cart, or whatever other WSGI Lite argument bindings were out there, in their Python 3 argument annotations.&lt;/p&gt;
&lt;p&gt;Likewise, you can, right now, write yourself a binding for your session, request, cart, or whatever objects, and be assured that people will be able to use them with any decorator (or other tool) that uses &quot;WSGI Lite binding rules&quot;.&lt;/p&gt;
&lt;p&gt;Even in tools that haven't been &lt;em&gt;thought of&lt;/em&gt; yet, let alone implemented.&lt;/p&gt;
&lt;p&gt;And that's the power of a &lt;strong&gt;protocol&lt;/strong&gt;, versus a mere library.&lt;/p&gt;
&lt;p&gt;Now, all in all, the argument binding sub-protocol is perhaps the most potentially-controversial part of the WSGI Lite protocol suite.&amp;nbsp; It's totally new, and as far as I know, unprecedented in the WSGI world.&amp;nbsp; And if you're the developer of a heavyweight WSGI library or framework, it might not seem very important to you.&lt;/p&gt;
&lt;p&gt;However, the point of it isn't to re-solve a problem you've already solved for your own library, or to replace your API.&amp;nbsp; Rather, it's a way to allow people to make &lt;em&gt;smaller libraries&lt;/em&gt;, by 1) shrinking the unit of reuse to the argument, rather than the decorator, and 2) lowering the entry barrier for a library to be written, by removing the need for a big API or a complex decorator.&lt;/p&gt;
&lt;p&gt;And of course, it also lets you add binding rules on top of your existing big library, to offer users an enticement or &quot;gateway drug&quot; to using the rest of your library.&amp;nbsp; You can, in effect, begin advertising your library as a &lt;em&gt;catalog of bindings&lt;/em&gt;, rather than trying to get people to drink &lt;strong&gt;all&lt;/strong&gt; of your library's cool-aid at once.&lt;/p&gt;
&lt;h4&gt;So, Where Do We Go From Here?&lt;/h4&gt;
&lt;p&gt;Well, at this point, the protocols are out there, but they don't have any &quot;official&quot; standing, except for my attempt at declaring them &quot;red squares&quot;.&amp;nbsp; That is, they're potential points of co-ordination, and they have my backing as a potential &quot;way forward&quot; for the next-generation of WSGI.&lt;/p&gt;
&lt;p&gt;But this doesn't mean they won't &lt;em&gt;change&lt;/em&gt; between now and any real &quot;official&quot; status (like a PEP).&lt;/p&gt;
&lt;p&gt;My original effort at WSGI -- originally called &quot;WCI&quot; -- was not very much like WSGI at all.&amp;nbsp; The fundamental idea in WCI and WSGI was the same, sure, but the final implementation was very different.&lt;/p&gt;
&lt;p&gt;And the same thing might happen with WSGI Lite, too.&lt;/p&gt;
&lt;p&gt;Indeed, I've already gotten emails from a couple of big WSGIans about potential changes to WSGI Lite to fix other problems...&amp;nbsp; and so some things may well happen there.&lt;/p&gt;
&lt;p&gt;Mostly, though, what I want to do with WSGI Lite is create protocols that allow lightweight, &lt;em&gt;collaborative&lt;/em&gt; solutions to those problems.&lt;/p&gt;
&lt;p&gt;For example, rather than trying to fix all of the warts in &quot;wsgi.input&quot; in the core Lite protocol, I'd rather see some proposals for &lt;strong&gt;bindings&lt;/strong&gt; that people can use to fix those problems.&lt;/p&gt;
&lt;p&gt;Instead of us trying, yet again, to create the One True Input Object!&lt;/p&gt;
&lt;p&gt;Now, is that really possible with wsgi.input, or any of the other warts that people would like to see fixed in the &quot;next generation&quot; of WSGI?&lt;/p&gt;
&lt;p&gt;I don't know.&lt;/p&gt;
&lt;p&gt;But I think it's worth a shot at &lt;em&gt;finding out&lt;/em&gt;.&amp;nbsp; And if there are some clear wins to be had by tweaking the three Lite sub-protocols, or adding some others to the mix, I'm &lt;strong&gt;all ears&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These are things that need to be hashed out a bit before the protocols are PEPpable, and yes, perhaps a bit of API bikeshedding may be needed as well.&lt;/p&gt;
&lt;p&gt;And you know what?&lt;/p&gt;
&lt;p&gt;I'm kind of looking forward to it.&lt;/p&gt;
&lt;p&gt;See you on the Web-SIG!&lt;/p&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=-xrv6pYqpIw:NbMfo6iN-_Y:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=-xrv6pYqpIw:NbMfo6iN-_Y:UT3xtbGYFzA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?d=UT3xtbGYFzA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=-xrv6pYqpIw:NbMfo6iN-_Y:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?i=-xrv6pYqpIw:NbMfo6iN-_Y:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</description>
	<pubDate>Mon, 01 Aug 2011 19:57:57 +0000</pubDate>
</item>
<item>
	<title>Phillip J. Eby: WSGI Is Dead: Long Live WSGI Lite!</title>
	<guid>http://feedproxy.google.com/~r/pje-on-programming/~3/6gjGndnMEn8/wsgi-is-dead-long-live-wsgi-lite.html</guid>
	<link>http://feedproxy.google.com/~r/pje-on-programming/~3/6gjGndnMEn8/wsgi-is-dead-long-live-wsgi-lite.html</link>
	<description>&lt;p&gt;Almost a decade ago, back when I first proposed the idea of WSGI to the Web-SIG, I had a rather idealistic vision of how WSGI could be a kind of &quot;framework dissolver&quot;.&amp;nbsp; I envisioned a future in which everything was pluggable, and there would no longer be any reason to have monolithic application frameworks, because everything could be done with libraries, middleware, and decorators.&lt;/p&gt;
&lt;p&gt;Alas, that idealistic future didn't come to pass.&amp;nbsp; In fact, as far back as 2007, I had already noticed it wasn't working, and &lt;a href=&quot;http://dirtsimple.org/2007/02/wsgi-middleware-considered-harmful.html&quot;&gt;proposed an idea for a WSGI 2 protocol&lt;/a&gt; that would resolve the problems...&amp;nbsp; and then proceeded to do nothing for the next few years.&amp;nbsp; (Well, I've been doing &lt;em&gt;other&lt;/em&gt; things, like working on setuptools, Chandler, and my own business.&amp;nbsp;&amp;nbsp;I just wasn't working on &lt;em&gt;web apps&lt;/em&gt; or WSGI!)&lt;/p&gt;
&lt;p&gt;Anyway, last week, Armin Ronacher wrote a great article on his blog called &lt;a href=&quot;http://lucumr.pocoo.org/2011/7/27/the-pluggable-pipedream/&quot;&gt;WSGI and the Pluggable Pipe Dream&lt;/a&gt;, about this very topic.&amp;nbsp; If you haven't read it, I urge you to do so, as it provides in-depth coverage of many of WSGI's dark corners and design decisions that are not widely understood by people who weren't involved in the original design, or who haven't spent a lot of time working with it.&lt;/p&gt;&lt;p&gt;But I was a little disappointed with the end of the article, because Armin's build-up led me to believe he had a solution to the problems of dealing with crud like start_response, write, close, and all that in WSGI middleware.&amp;nbsp; But really, his claim ended up being that even if somebody invented something &lt;em&gt;better&lt;/em&gt; than WSGI, there would be no way to &lt;strong&gt;replace&lt;/strong&gt; it, because of all the investment in the existing protocol.&lt;/p&gt;
&lt;p&gt;So, I decided to &lt;strong&gt;do&lt;/strong&gt; something about that.&lt;/p&gt;&lt;p&gt;&lt;img height=&quot;300&quot; alt=&quot;CHALLENGE ACCEPTED!&quot; src=&quot;http://dirtsimple.org/2011/07/9163302.jpg&quot; width=&quot;400&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Introducing &lt;a href=&quot;https://bitbucket.org/pje/wsgi_lite/&quot;&gt;WSGI Lite&lt;/a&gt;, WSGI's new younger brother.&lt;/p&gt;
&lt;p&gt;WSGI Lite is a protocol that's basically the same thing as the &quot;WSGI 2&quot; calling convention I proposed four years ago, and pretty much the same as what other languages' versions of WSGI use.&amp;nbsp; There's no start_response, close, write, or exc_info to mess with, and I even threw in a &lt;em&gt;massively&lt;/em&gt; improved way to manage post-request resource release and cleanup operations.&lt;/p&gt;
&lt;p&gt;Now, if WSGI Lite were just a WSGI alternative, Armin's article would be right: nobody would use it, because it'd be in competition with WSGI, and we'd have to basically &quot;&lt;strong&gt;Shut...&amp;nbsp; Down...&amp;nbsp; Everything&lt;/strong&gt;&quot;&amp;nbsp; in order to replace it.&lt;/p&gt;
&lt;p&gt;But the WSGI Lite protocol is actually &lt;em&gt;backwards compatible&lt;/em&gt; with WSGI.&amp;nbsp; You can write code to the WSGI Lite API, and transparently interoperate with existing WSGI servers, apps, and middleware.&lt;/p&gt;
&lt;p&gt;Which means, you don't have to &lt;em&gt;replace&lt;/em&gt; anything; you can just start using it, wherever it's appropriate or useful to do so.&lt;/p&gt;
&lt;p&gt;All it takes, is two decorators: one to declare an app as being a &quot;lite&quot; app, and one to allow you to call standard WSGI apps using the &quot;lite&quot; calling protocol.&amp;nbsp; (And, as a special bonus, the decorator you use for new code can also automatically bind environment keys, session/request objects, or other cool things to your app or middleware's keyword arguments.&amp;nbsp; It's &lt;em&gt;tres chic&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;I'm hoping that this will revitalize the &quot;pluggable pipe dream&quot;, and make it a little less dream, a little more &lt;a href=&quot;http://svn.colorstudy.com/home/ianb/wsgi-tutorial/diagram-urldispatch.png&quot;&gt;pipe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So&amp;nbsp;&lt;a href=&quot;http://pypi.python.org/pypi/wsgi_lite&quot;&gt;try it out&lt;/a&gt;, and let me know what you think.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: on reflection, the above article is woefully inadequate to explain the actual rationale of the WSGI Lite protocol or its implementation, so I've written a&lt;/em&gt; &lt;a href=&quot;http://dirtsimple.org/2011/08/is-wsgi-lite-library-or-protocol-and.html&quot;&gt;&lt;em&gt;follow-up piece&lt;/em&gt;&lt;/a&gt; &lt;em&gt;to cover that.&amp;nbsp; Check it out!&lt;/em&gt;&lt;/p&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=6gjGndnMEn8:Knbpqla1sjc:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=6gjGndnMEn8:Knbpqla1sjc:UT3xtbGYFzA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?d=UT3xtbGYFzA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?a=6gjGndnMEn8:Knbpqla1sjc:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/pje-on-programming?i=6gjGndnMEn8:Knbpqla1sjc:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</description>
	<pubDate>Mon, 01 Aug 2011 19:57:26 +0000</pubDate>
</item>
<item>
	<title>Tarek Ziade: Pycon France and Pycon Japan this summer</title>
	<guid>http://tarekziade.wordpress.com/2011/08/01/pycon-france-and-pycon-japan-this-summer/</guid>
	<link>http://tarekziade.wordpress.com/2011/08/01/pycon-france-and-pycon-japan-this-summer/</link>
	<description>&lt;p&gt;It&amp;#8217;s awesome to see all those Pycon conferences getting organized throughout the world. &lt;a href=&quot;http://www.pycon.org&quot;&gt;http://www.pycon.org&lt;/a&gt; lists most of them.&lt;/p&gt;
&lt;p&gt;For me, Pycon is also a good opportunity to travel and meet people &amp;#8212; I try to attend to Pycon US every year, and when possible to an extra Pycon elsewhere.&lt;/p&gt;
&lt;p&gt;This summer I&amp;#8217;ll attend to &lt;a href=&quot;http://pycon.fr&quot;&gt;Pycon France&lt;/a&gt; and &lt;a href=&quot;http://2011.pycon.jp/english-information&quot;&gt;Pycon Japan&lt;/a&gt;. I&amp;#8217;ve submitted a proposal for the first one, that will happen in Rennes, France in September. If you&amp;#8217;re in France, you should attend. Rennes is lovely and while the conferences are in French, there will probably be some social events before and after, where english speakers won&amp;#8217;t be left aside !&lt;/p&gt;
&lt;p&gt;I am also giving a keynote for the second one that&amp;#8217;s happening in Tokyo, Japan at the end of this month. If you happen to be a Pythoneer in Tokyo, speaking French or English, I&amp;#8217;d love to meet there.&lt;/p&gt;
&lt;br /&gt;  &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gofacebook/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gotwitter/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/tarekziade.wordpress.com/1960/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/tarekziade.wordpress.com/1960/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=tarekziade.wordpress.com&amp;blog=448161&amp;post=1960&amp;subd=tarekziade&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 01 Aug 2011 14:56:20 +0000</pubDate>
</item>
<item>
	<title>Wayne Witzel: Pyramid and Traversal with a RESTful interface</title>
	<guid>http://pieceofpy.com/blog/2011/08/01/pyramid-and-traversal-with-a-restful-interface</guid>
	<link>http://pieceofpy.com/blog/2011/08/01/pyramid-and-traversal-with-a-restful-interface</link>
	<description>&lt;p id=&quot;p1&quot;&gt;When Pyramid was first being developed I was intrigued by the idea that I could create context aware views and use a host of methods to check permissions on those contexts, generate URLs based off those contexts, and auto-magically call the view required based on the context and the requested resource path.&lt;/p&gt;
&lt;p id=&quot;p2&quot;&gt;So one of my first experiments with Pyramid was to implement proper resource urls for contexts in a RESTful fashion. Eventually I plan to do this for the entire collection as well, but for now all I need is the context level RESTful interface. The goal of which is to have URLs that go something like this.&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; /resource/id (GET) - default view of the resource &lt;/li&gt;
    &lt;li&gt; /resource/id/edit (GET) - the form that allows you to edit the resource &lt;/li&gt;
    &lt;li&gt; /resource/id/create (GET) - the form that allows you to edit the resource &lt;/li&gt;
    &lt;li&gt; /resource/id (PUT) - updates &lt;/li&gt;
    &lt;li&gt; /resource/id (POST) - create &lt;/li&gt;
    &lt;li&gt; /resource/id (DELETE) - delete &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;p3&quot;&gt;This ends up being pretty damn simple with Pyramid and Traversal and for those of you new to traversal or even those who aren't, I highly recommend reading the &lt;a href=&quot;http://docs.pylonsproject.org/projects/pyramid/dev/narr/muchadoabouttraversal.html&quot;&gt;Much Ado About Traversal&lt;/a&gt; chapter in the Pyramid documentation. Also on a side note all of the snippets from this post are part of a real project called &lt;a href=&quot;https://sourceforge.net/p/stockpot/code&quot;&gt;Stockpot&lt;/a&gt; and the code is freely available via SourceForge.&lt;/p&gt;
&lt;h2&gt;My Root&lt;/h2&gt;
&lt;p id=&quot;p4&quot;&gt;So first step for me was to design my Root object. This is the really the foundation for traversal and determines what resources it will be able to find and how to interact with them once it finds them. My Root object is simple and looks like this.&lt;/p&gt;
&lt;table class=&quot;pygments_murphytable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_owned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__parent__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__parent__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_owned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p id=&quot;p5&quot;&gt;This is pretty straightforward. We create a user entry point for the first call to &lt;strong&gt;getitem&lt;/strong&gt; and return the User model with a name of user and the Root object as the parent.&lt;/p&gt;
&lt;h2&gt;My Model&lt;/h2&gt;
&lt;p id=&quot;p6&quot;&gt;For my Root object to really do anything useful our model class needs to do some work so that when the traversal algorithm calls &lt;strong&gt;getitem&lt;/strong&gt; on our User model it actually gets something useful back. I've done this using a base class for my declarative_base call.&lt;/p&gt;
&lt;table class=&quot;pygments_murphytable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StockpotBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;DBSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__parent__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoResultFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__len__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    
    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StockpotBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__tablename__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'users'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;association_proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user_groups'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;recipes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'User(id={0}, email={1}, groups={2})'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p id=&quot;p7&quot;&gt;So that is a pretty big chunk of code so let me go through what is happening, it is rather simple. I've created StockpotBase which has the methods our traversal algorithm is going to want. I've used that as the cls for my declarative_base call so that any class that I create that inherits from Base will have all of the proper methods needed.&lt;/p&gt;
&lt;p id=&quot;p8&quot;&gt;The &lt;strong&gt;getitem&lt;/strong&gt; itself ensures that the parent is set to the generic user class and the name of the class is set to the primary key. This is important later when we start using resource_url() to generate links for us in our templates, if you consider that the urls will be generated with the pattern of /&lt;strong&gt;parent&lt;/strong&gt;.&lt;strong&gt;name&lt;/strong&gt;/context.&lt;strong&gt;name&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;My Views&lt;/h2&gt;
&lt;p id=&quot;p9&quot;&gt;With the Root object setup and our model &quot;traversal enabled&quot;, we can look at how the views for this will be setup. I personally like to use the config.scan('stockpot.views') helper and use the @view_config decorator for my views. I find it cleaner and easier to to have the view_config right with the actually def.&lt;/p&gt;
&lt;table class=&quot;pygments_murphytable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# RESOURCE_URL = /user/id&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@view_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user/view.mako'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# RESOURCE_URL = /user/id/edit&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@view_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user/edit.mako'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p id=&quot;p10&quot;&gt;So here is the default GET view. It allows anyone to use this view, but I will have a blog post about permissions with ACL and traversal later, and it uses the renderer of my user/view.mako template. Then we have the edit view which requires User:edit permissions and uses the edit.mako template. Pretty simple. Next we have the first of the JSON views (they don't have to be JSON).&lt;/p&gt;
&lt;table class=&quot;pygments_murphytable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@view_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p id=&quot;p11&quot;&gt;And the mako template jQuery for this might look something like this&lt;/p&gt;
&lt;table class=&quot;pygments_murphytable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#put'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'${request.resource_url(user)}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p id=&quot;p12&quot;&gt;And that is it. You would repeat the same view pattern for request_method POST and request_method DELETE and you would have RESTful API in to your resources/models in a very clean fashion.&lt;/p&gt;
&lt;h2&gt;What Happens&lt;/h2&gt;
&lt;p id=&quot;p13&quot;&gt;When a user visits the resource url a simple series of calls to &lt;strong&gt;getitem&lt;/strong&gt; happens. The Root (/) object is called with 'user'. A User object with the name of 'user' and the parent of Root is returned. The User class has it's &lt;strong&gt;getitem&lt;/strong&gt; called and uses the DBSession to lookup a user based on the key given. For example /user/1 (Root / User / k) would result in '1' being passed to the user objects &lt;strong&gt;getitem&lt;/strong&gt; as the key. If it locates the user, it returns the instance and sets the name and parent. If you don't set the name when you call resource_url with the context, the generated URL would look read /user instead of /user/1.&lt;/p&gt;
&lt;p id=&quot;p14&quot;&gt;There is nothing after the 1 so it looks for a generic unnamed view that handles the User context. In our case, our get method. When you add on edit, /user/1/edit it works in the same fashion, but when it tries to call &lt;strong&gt;getitem&lt;/strong&gt; a second time on the User instance it will throw a key error which tells Pyramid that I am looking for a view named edit with the context of User. This traversal works the same way for the JSON calls as well.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p id=&quot;p15&quot;&gt;I don't like the fact that there are extra DB calls here, but it is a trade off. Even the /user/1/edit has to make two database calls to get the KeyError and review the proper view, but as a side-effect I can do something like /user/1/collection/1 and get the specific item of the collection owned by the user. That extends to edits as well ... /user/1/collection/1/edit. Overall I like how this pattern has evolved in my application, but would appreciate any feedback or suggested improvements to what I've done so far.&lt;/p&gt;</description>
	<pubDate>Mon, 01 Aug 2011 12:00:00 +0000</pubDate>
</item>
<item>
	<title>PyTexas: PyTexas 2011 Status -- 6 Weeks To Go</title>
	<guid>http://pytexas.blogspot.com/2011/07/pytexas-2011-status-6-weeks-to-go.html</guid>
	<link>http://pytexas.blogspot.com/2011/07/pytexas-2011-status-6-weeks-to-go.html</link>
	<description>&lt;div dir=&quot;ltr&quot;&gt;&lt;div&gt;Here are a few notes on how things are going with regard to PyTexas 2011&lt;/div&gt;&lt;ul&gt;&lt;li&gt;I'm strongly leaning toward using this blog as the primary website for PyTexas; it looks better and has most of the needed functionality which the wiki lacks. There are still a lot of pages linking to the wiki from the outside so I'm not going to shut it down; it still has uses that this blog does not yet fulfill. &amp;nbsp;It might make sense to point the domain pytx.org to this blog, and keep pytexas.org for the wiki for legacy reasons. I have already setup &lt;a href=&quot;http://wiki.pytexas.org/&quot;&gt;http://wiki.pytexas.org&lt;/a&gt; and hope everyone can use that going forward when linking to the wiki.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;http://wiki.pytexas.org/Sponsorship2011?action=AttachFile&amp;do=view&amp;target=PyTexas_2011_Sponsor_Prospectus_v2.pdf&quot;&gt;Sponsor Prospectus&lt;/a&gt; has gone out, the PyTexas Sponsor &lt;a href=&quot;http://psfmember.org/d/civicrm/contribute/transact?reset=1&amp;id=3&quot;&gt;payment gateway&lt;/a&gt; has been set up, and sponsor donations have started to roll in. &amp;nbsp;Thanks go to Kurt Kaiser of the PSF for getting the payment gateway set up.&amp;nbsp;&lt;/li&gt;&lt;li&gt;We now have sponsor pledges for $3925, though not all have completed payment. Thanks to OpenStack, BitBucket, Snoball, and ZeOmega for stepping up to Platinum Sponsorship. Thanks to Luna Data solutions of Austin agreeing to sponsor at the Gold level. Likewise, thanks to FreshBooks of Canada for buying a Silver Sponsorship even though they are nowhere near Texas. Fish Technologies of Dallas has also sponsored at the Silver level. Even some individuals have started to donate at the $25 &quot;friends&quot; level. &amp;nbsp;Not all the sponsors are yet displayed since I'm still lacking logos.&lt;/li&gt;&lt;li&gt;There is a good chance we'll have video recordings of PyTexas this year...stay tuned.&lt;/li&gt;&lt;li&gt;The&amp;nbsp;submarine battle&amp;nbsp;programming competition will not be ready to run in time for PyTexas, so we'll have to save that for a later event. That means that Sunday can be filled with additional presentations, tutorials, sprints, etc.&lt;/li&gt;&lt;li&gt;We have a &lt;a href=&quot;http://wiki.pytexas.org/TalkProposals2011&quot;&gt;decent variety of talks&lt;/a&gt; planned, and I have some ideas about filling out the schedule further:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Workshops aimed at helping beginners and intermediate developers expand their skillset around installation, building, and distribution of Python packages. &amp;nbsp;I'm confident we can get experienced volunteers to help out running such workshops, provided they can be done in an ad-hoc manner with little preparation required.&lt;/li&gt;&lt;li&gt;Jeff Rush mentioned an idea about having panel discussions; a web framework &quot;hot seat&quot; might prove popular.&lt;/li&gt;&lt;li&gt;&quot;Open social&quot; timeslots to make sure people have time to interact with the attending sponsors, eat snacks, etc.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;The draft schedule is not yet posted but I plan to have that done soon.&lt;/li&gt;&lt;li&gt;I've decided to use Google Docs for surveys and registrations, in the name of expediency. I have &lt;span id=&quot;goog_833678015&quot;&gt;&lt;/span&gt;&lt;a href=&quot;http://pytexas.blogspot.com/p/pytexas-2011-registration.html&quot;&gt;several surveys planned&lt;/a&gt; &lt;span id=&quot;goog_833678016&quot;&gt;&lt;/span&gt;and general registration is &lt;a href=&quot;http://pytexas.blogspot.com/p/general-registration.html&quot;&gt;ready for testing&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;If anyone wants to help out with managing the design/layout of this site, or contribute blog postings, please let me know.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Lastly, I'd like to show off Dave Birch's design for this year's t-shirt graphic, inspired by Monty Python:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-a2AFQdlH-xM/TjYFka_xG7I/AAAAAAAAA9Q/IQmnxQfAe44/s1600/PyTexas2011_t-shirt_front.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;278&quot; src=&quot;http://2.bp.blogspot.com/-a2AFQdlH-xM/TjYFka_xG7I/AAAAAAAAA9Q/IQmnxQfAe44/s400/PyTexas2011_t-shirt_front.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/2523523205709301131-655049600033665458?l=pytexas.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 01 Aug 2011 12:41:00 +0000</pubDate>
</item>
<item>
	<title>Chad Whitacre: In Conferences and Customer Service, Don't Forget the Humans</title>
	<guid>http://blag.whit537.org/2011/08/in-conferences-and-customer-service.html</guid>
	<link>http://blag.whit537.org/2011/08/in-conferences-and-customer-service.html</link>
	<description>&lt;p&gt;Three things (among others) happened this past week:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Registration opened for &lt;a href=&quot;http://py.codeconf.com/&quot;&gt;PyCodeConf&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;EJ's &lt;a href=&quot;http://ejroundtheworld.blogspot.com/2011/07/airbnb-nightmare-no-end-in-sight.html&quot;&gt;Airbnb nightmare&lt;/a&gt; went viral.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://pyohio.org/&quot;&gt;PyOhio&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let&amp;rsquo;s connect some dots.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;PyCodeConf is an exclusive, high-end conference put on by Github. It&amp;rsquo;s at a swanky hotel in Miami&amp;rsquo;s South Beach. Registration is $600, plus the $179/night (which is dirt cheap, considering). Local companies are talking about the &lt;a href=&quot;https://github.com/blog/893-pycodeconf-tickets-on-sale#comment-13183&quot;&gt;roof-top parties&lt;/a&gt; they&amp;rsquo;re going to throw. Github is billing it as a meeting &amp;ldquo;with the thought leaders and visionaries that will drive the Python community over the next year.&amp;rdquo; Guido is noticeably absent. So are &lt;a href=&quot;https://twitter.com/#!/raymondh&quot;&gt;Raymond&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/users/95810/alex-martelli&quot;&gt;Alex&lt;/a&gt;, &lt;a href=&quot;http://nedbatchelder.com/&quot;&gt;Ned&lt;/a&gt;, &lt;a href=&quot;http://jacobian.org/&quot;&gt;Jacob&lt;/a&gt;, etc., etc., etc. &lt;a href=&quot;https://twitter.com/#!/ctitusbrown/status/95943889604718593&quot;&gt;Titus&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/#!/GrahamDumpleton/status/96051347929051136&quot;&gt;Graham&lt;/a&gt; are actively confused. Interestingly, Jesse Noller is involved. He&amp;rsquo;s the chair of PyCon, which, if I&amp;rsquo;m not mistaken, is the actual meeting of thought leaders and visionaries that will drive the Python community over the next year.&lt;/p&gt;&lt;p&gt;I have no doubt that PyCodeConf will sell out as Github promises. And I have no doubt that the attendees will have a blast drinking on South Beach roof-tops. That actually sounds really fun. But I think Github has miscalculated the character of the Python community.&lt;/p&gt;&lt;p&gt;PyOhio is much more in keeping with the Python ethos. It&amp;rsquo;s free for attendees (thanks to the volunteer organizers and the corporate sponsors). It&amp;rsquo;s held in a nice, but not flashy, facility (the student union at Ohio State University). And it displays real diversity on the often-overlooked spectrum of coolness. You know who I want to go to conferences with? Yes, the people doing Cool and Interesting Things&amp;mdash;the Googlers and the Facebookies and the people with startup stars in their eyes and the people who are the startup stars. I want them there. But I also want the quirky dude who loves writing really bad Tkinter games with his kids and can say to an audience, with absolute unselfconscious genuineness, &amp;ldquo;I like helping people.&amp;rdquo; That shit is beautiful. I want that at my conference, and I love Python because it&amp;rsquo;s full of that.&lt;/p&gt;&lt;p&gt;In the &lt;a href=&quot;http://codeconf.com/#fine-print&quot;&gt;fine print&lt;/a&gt; for CodeConf (the general conference that is the pattern for PyCodeConf), there is this reminder:&lt;/p&gt;&lt;blockquote&gt;While at GitHub Inc. events or related social networking opportunities, attendees should not engage in discriminatory or offensive speech or actions regarding gender, sexuality, race, or religion.&lt;/blockquote&gt;&lt;p&gt;They forgot coolness.&lt;/p&gt;&lt;p&gt;One more dot to connect. &lt;a href=&quot;http://www.airbnb.com/&quot;&gt;Airbnb&lt;/a&gt; is a Cool and Interesting Thing. It&amp;rsquo;s a Y Combinator-backed startup with a billion dollar &lt;a href=&quot;http://techcrunch.com/2011/07/24/Airbnb-bags-112-million-in-series-b-from-andreessen-and-others/&quot;&gt;valuation&lt;/a&gt;. Now news is breaking about people who were lulled into a false sense of security by Airbnb&amp;rsquo;s brand (with Craiglist, you &lt;i&gt;know&lt;/i&gt; to be careful): &lt;a href=&quot;http://ejroundtheworld.blogspot.com/2011/07/airbnb-nightmare-no-end-in-sight.html&quot;&gt;EJ&lt;/a&gt; and &lt;a href=&quot;http://techcrunch.com/2011/07/31/another-airbnb-victim-tells-his-story-there-were-meth-pipes-everywhere/&quot;&gt;Troy&lt;/a&gt; rented their apartments to derelicts who trashed and robbed them. Yes, the hosts could/should have been more careful. But Airbnb has whiffed on customer service in their follow-up, in a situation much more drastic than the Google customer service &lt;a href=&quot;http://www.twitlonger.com/show/bt5akp&quot;&gt;hiccup&lt;/a&gt; from a couple weeks ago. It took a &lt;a href=&quot;https://twitter.com/#!/vicgundotra/status/94184809936601090&quot;&gt;Hail Mary&lt;/a&gt; to Vic Gundotra, but Thomas Monopoly did get his &lt;a href=&quot;https://twitter.com/#!/thomasmonopoly/status/96333405423280128&quot;&gt;account back&lt;/a&gt; in under a week. After a month, Airbnb is mostly &lt;a href=&quot;http://techcrunch.com/2011/07/27/on-safety-a-word-from-airbnb/&quot;&gt;posturing&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The connection I want to make is that if we forget about humans in our rush to be &amp;ldquo;thought leaders and visionaries,&amp;rdquo; then we&amp;rsquo;ll build companies that also forget about humans. Customer service is expensive and hard. In the rush to do Cool and Interesting Things, it&amp;rsquo;s a tempting corner to cut. Let&amp;rsquo;s do better.&lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/36506138-1773946366736564262?l=blag.whit537.org&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 01 Aug 2011 10:38:00 +0000</pubDate>
</item>
<item>
	<title>Wingware: Free tickets for PyCon Australia 2011</title>
	<guid>http://wingware.blogspot.com/2011/08/free-tickets-for-pycon-australia-2011.html</guid>
	<link>http://wingware.blogspot.com/2011/08/free-tickets-for-pycon-australia-2011.html</link>
	<description>Wingware is sponsoring &lt;a href=&quot;http://pycon-au.org/2011/about/&quot;&gt;PyCon AU 2011&lt;/a&gt; and as part of our sponsor package we get two free tickets.&amp;nbsp; Unfortunately we won't be able to attend the conference ourselves so we are giving them away on a first-come-first-served basis.&amp;nbsp; If you would like one or two tickets to the conference, please email us at support at wingware dot com.&amp;nbsp; The conference will be held August 20-21 in Sydney, Australia.&lt;br /&gt;&lt;br /&gt;By the way, this year we are also sponsoring (or already  have sponsored) PyCon in North America, EuroPython, SciPy, Kiwi PyCon,  PyOhio, PyGotham, PyCon UK, PyCon DE, PyCon Finland, and PyCon  Ireland.&amp;nbsp; It's great to see so many Python conferences springing up  around the world, and we're pleased that we can help make them possible  by being sponsors!&lt;br /&gt;&lt;br /&gt;If you are attending any of these, keep an eye out for Wingware goodies and specials.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/131280338880620749-473196998810800566?l=wingware.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 01 Aug 2011 09:44:36 +0000</pubDate>
</item>
<item>
	<title>Muharem Hrnjadovic: First experiments with golang</title>
	<guid>http://muharem.wordpress.com/2011/08/01/first-experiments-with-golang/</guid>
	<link>http://muharem.wordpress.com/2011/08/01/first-experiments-with-golang/</link>
	<description>&lt;p&gt;I finally found some time to look at the &lt;a href=&quot;http://golang.org/&quot;&gt;Go programming language&lt;/a&gt; (aka &lt;code&gt;golang&lt;/code&gt;). In order to get a feeling for it I picked a &lt;a href=&quot;http://code.google.com/codejam/contest/dashboard?c=351101#s=p0&quot;&gt;random Google code jam problem&lt;/a&gt; and &lt;a href=&quot;https://github.com/al-maisan/exercises/tree/master/cj-a-store-credit&quot;&gt;programmed it in Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code used in the experiments that follow is pretty simple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/main.go&quot;&gt;the main module&lt;/a&gt; handles the command line arguments and prints the results&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/input.go&quot;&gt;the input module&lt;/a&gt; parses the input file and starts a calculation for each input&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/calculate.go&quot;&gt;the calculation module&lt;/a&gt; finds a solution for a single input and writes it to a result channel&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;first impressions&lt;/h2&gt;
&lt;p&gt;My first impressions were mostly positive: &lt;code&gt;Go&lt;/code&gt; has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://golang.org/doc/docs.html&quot;&gt;decent documentation&lt;/a&gt; covering the language proper as well as the &lt;a href=&quot;http://golang.org/pkg/&quot;&gt;standard library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a fast compiler resulting in short edit-compile-test cycles&lt;/li&gt;
&lt;li&gt;a nice standard library and a wealth of packages (provided by the community)&lt;/li&gt;
&lt;li&gt;a lively and friendly &lt;a href=&quot;http://groups.google.com/group/golang-nuts&quot;&gt;mailing list&lt;/a&gt; and &lt;code&gt;irc&lt;/code&gt; channel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The language has quite a &lt;b&gt;&amp;#8220;direct&amp;#8221;&lt;/b&gt; feel to it: I could get to work and be productive almost immediately.&lt;br /&gt;
This is in stark contrast to other languages I tried to learn recently e.g. &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt; (back in January): it required a lot of reading and even a couple of days into it I was not really productive in Scala.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Go&lt;/code&gt; is quite the opposite, the barrier to entry is low, the language is clean and simple. The combined declaration and initialisation operator (&lt;code&gt;':='&lt;/code&gt;) alone is a godsend.&lt;/p&gt;
&lt;p&gt;Coming from a Python background the main thing I was missing was the &lt;a href=&quot;http://en.wikipedia.org/wiki/Read-eval-print_loop&quot;&gt;REPL&lt;/a&gt;. Who knows, maybe there is even one out there but I just did not find it yet..?&lt;/p&gt;
&lt;h2&gt;playing with goroutines&lt;/h2&gt;
&lt;p&gt;One of the most attractive &lt;code&gt;golang&lt;/code&gt; features is its support for concurrent programming via &lt;a href=&quot;http://golang.org/doc/effective_go.html#goroutines&quot;&gt;goroutines&lt;/a&gt; and I wanted to play with these.&lt;/p&gt;
&lt;p&gt;The programming problem chosen came with an input for 50 calculations. I used it to create inputs with 50, 100 and 200 &lt;b&gt;*thousand*&lt;/b&gt; calculations. All calculations are independent of each other i.e. ideally parallelisable.&lt;/p&gt;
&lt;p&gt;Being a fairly young language still &lt;code&gt;Go&lt;/code&gt; &lt;a href=&quot;http://golang.org/doc/effective_go.html#parallel&quot;&gt;does not parallelise code by default&lt;/a&gt;. If CPU parallelism is desired one must tell the run-time how many goroutines shall execute simultaneously.&lt;/p&gt;
&lt;p&gt;The code I wrote &lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/input.go#L95&quot;&gt;starts each calculation in a separate goroutine&lt;/a&gt; and allows the user to &lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/main.go#L40&quot;&gt;specify the number of CPUs/cores that should be used&lt;/a&gt; to execute the program.&lt;/p&gt;
&lt;p&gt;Using a &lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/run-test&quot;&gt;bash script&lt;/a&gt; I ran the resulting program varying both the number of calculations and the number of CPU cores.&lt;/p&gt;
&lt;p&gt;These experiments were conducted on a 32-core server (Quad-Core AMD Opteron Processor 8356) with 64GB of RAM running &lt;code&gt;Ubuntu 11.04&lt;/code&gt; server. Also, I ran each configuration for three consecutive times and used the average duration in the graph below.&lt;/p&gt;
&lt;p&gt;Apparently the &lt;code&gt;golang&lt;/code&gt; run-time was not able to utilise more than 8 cores when running this particular program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/al-maisan/exercises/raw/master/cj-a-store-credit/data/calc-stats.png&quot; alt=&quot;50, 100 and 200 thousand calculations running on 1 through 16 CPU cores&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As can be seen from the graph (&lt;a href=&quot;https://github.com/al-maisan/exercises/raw/master/cj-a-store-credit/data/calc-stats.png&quot;&gt;full size&lt;/a&gt;) above, executing the program on more than 8 cores did not decrease its running time futher.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;200K&lt;/code&gt; calculations input file is a bit over half a gigabyte so I suspected that the program is dominated by &lt;tt&gt;I/O&lt;/tt&gt; and the goroutines cannote execute because the &lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/input.go#L65&quot;&gt;result channel&lt;/a&gt; is full.&lt;/p&gt;
&lt;p&gt;That lead me to &lt;a href=&quot;https://github.com/al-maisan/exercises/blob/master/cj-a-store-credit/main.go#L34&quot;&gt;experiment with different result channel sizes&lt;/a&gt;. The resulting running times (e.g. for &lt;code&gt;200K&lt;/code&gt; calculations) can be seen in the graph (&lt;a href=&quot;https://github.com/al-maisan/exercises/raw/master/cj-a-store-credit/data/200k-rchans-variation.png&quot;&gt;full size&lt;/a&gt;) below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/al-maisan/exercises/raw/master/cj-a-store-credit/data/200k-rchans-variation.png&quot; alt=&quot;The 200K calculations running on 1 through 16 CPU cores and with varying result channel sizes&quot; /&gt;&lt;/p&gt;
&lt;p&gt;However, varying the result channel sizes did not seem to have a big effect.&lt;/p&gt;
&lt;p&gt;Anyway, I am pretty happy with the code at this point but suggestions are always welcome, particularly those aiming at improving the degree of parallelism &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;h2&gt;conclusions&lt;/h2&gt;
&lt;p&gt;I am amazed how far I got by investing approx. 10 hours in learning &lt;code&gt;Go&lt;/code&gt; and programming in it.&lt;/p&gt;
&lt;p&gt;Having used &lt;a href=&quot;http://www.python.org/&quot;&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt; almost exclusively for the last 5 years I am pretty spoiled when it comes to code conciseness and productivity.&lt;br /&gt;
&lt;code&gt;Go&lt;/code&gt; is not too far away though, and, programming in it was fun and enjoyable.&lt;/p&gt;
&lt;p&gt;I will definitely continue to explore it. Maybe &lt;em&gt;you&lt;/em&gt; should give it a whirl as well &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gofacebook/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gotwitter/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/muharem.wordpress.com/192/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/muharem.wordpress.com/192/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=muharem.wordpress.com&amp;blog=484506&amp;post=192&amp;subd=muharem&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 01 Aug 2011 08:44:02 +0000</pubDate>
</item>
<item>
	<title>PyCon: PyCon JP 2011 - Registration is Open</title>
	<guid>http://pycon.blogspot.com/2011/08/pycon-jp-2011-registration-is-open.html</guid>
	<link>http://pycon.blogspot.com/2011/08/pycon-jp-2011-registration-is-open.html</link>
	<description>&lt;div class=&quot;document&quot; id=&quot;pycon-jp-2011-registration-is-open&quot;&gt;The registration of &lt;a class=&quot;reference external&quot; href=&quot;http://2011.pycon.jp/english-information&quot;&gt;PyCon JP 2011&lt;/a&gt; is now open!&lt;br /&gt;&lt;br /&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://2011.pycon.jp/english-information&quot;&gt;PyCon JP 2011&lt;/a&gt; will be held at &lt;a class=&quot;reference external&quot; href=&quot;http://aiit.ac.jp/english/&quot;&gt;Advanced Institute of Industrial Technology&lt;/a&gt; University in Tokyo, &lt;strong&gt;27th(Sat.) August&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://2011.pycon.jp/program&quot;&gt;Program&lt;/a&gt; are 3 tracks, single English track and 2 Japanese tracks.&lt;br /&gt;&lt;br /&gt;The fee is 2,000 JPY. For participants coming from outside of Japan: Payment is available via PayPal. Please go to the PayPal section below and follow the instructions, then fill the form in section 2. Do not forget to provide your transaction ID in the &quot;Serial No.&quot; field.&lt;br /&gt;&lt;br /&gt;&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Registration (and payment): &lt;a class=&quot;reference external&quot; href=&quot;http://2011.pycon.jp/audience/registration&quot;&gt;Click here&lt;/a&gt; to jump to the registration page&lt;/li&gt;&lt;/ul&gt;Additionally, the next day &lt;strong&gt;28th(Sun.) August&lt;/strong&gt;, it will be held Sprint event at the same place.&lt;br /&gt;&lt;br /&gt;For more information on &lt;a class=&quot;reference external&quot; href=&quot;http://2011.pycon.jp/english-information&quot;&gt;http://2011.pycon.jp/english-information&lt;/a&gt;, please write us via email (contact at pycon dot jp).&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/11638628-852654890121577495?l=pycon.blogspot.com&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 01 Aug 2011 06:31:55 +0000</pubDate>
</item>

</channel>
</rss>
